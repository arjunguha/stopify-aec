// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block             = require("bs-platform/lib/js/block.js");
var Fixture           = require("../fixture.js");
var Caml_array        = require("bs-platform/lib/js/caml_array.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var Micro_bench_types = require("../micro_bench_types.js");

var tpi = 2.0 * 3.14159265358979323846;

function fft(px, py, np) {
  var i = 2;
  var m = 1;
  while(i < np) {
    i = i + i | 0;
    m = m + 1 | 0;
  };
  var n = i;
  if (n !== np) {
    for(var i$1 = np + 1 | 0; i$1 <= n; ++i$1){
      Caml_array.caml_array_set(px, i$1, 0.0);
      Caml_array.caml_array_set(py, i$1, 0.0);
    }
    Pervasives.print_string("Use ");
    Pervasives.print_int(n);
    Pervasives.print_string(" point fft");
    Pervasives.print_newline(/* () */0);
  }
  var n2 = n + n | 0;
  for(var k = 1 ,k_finish = m - 1 | 0; k <= k_finish; ++k){
    n2 = n2 / 2 | 0;
    var n4 = n2 / 4 | 0;
    var e = tpi / n2;
    for(var j = 1; j <= n4; ++j){
      var a = e * (j - 1 | 0);
      var a3 = 3.0 * a;
      var cc1 = Math.cos(a);
      var ss1 = Math.sin(a);
      var cc3 = Math.cos(a3);
      var ss3 = Math.sin(a3);
      var is = j;
      var id = (n2 << 1);
      while(is < n) {
        var i0r = is;
        while(i0r < n) {
          var i0 = i0r;
          var i1 = i0 + n4 | 0;
          var i2 = i1 + n4 | 0;
          var i3 = i2 + n4 | 0;
          var r1 = Caml_array.caml_array_get(px, i0) - Caml_array.caml_array_get(px, i2);
          Caml_array.caml_array_set(px, i0, Caml_array.caml_array_get(px, i0) + Caml_array.caml_array_get(px, i2));
          var r2 = Caml_array.caml_array_get(px, i1) - Caml_array.caml_array_get(px, i3);
          Caml_array.caml_array_set(px, i1, Caml_array.caml_array_get(px, i1) + Caml_array.caml_array_get(px, i3));
          var s1 = Caml_array.caml_array_get(py, i0) - Caml_array.caml_array_get(py, i2);
          Caml_array.caml_array_set(py, i0, Caml_array.caml_array_get(py, i0) + Caml_array.caml_array_get(py, i2));
          var s2 = Caml_array.caml_array_get(py, i1) - Caml_array.caml_array_get(py, i3);
          Caml_array.caml_array_set(py, i1, Caml_array.caml_array_get(py, i1) + Caml_array.caml_array_get(py, i3));
          var s3 = r1 - s2;
          var r1$1 = r1 + s2;
          var s2$1 = r2 - s1;
          var r2$1 = r2 + s1;
          Caml_array.caml_array_set(px, i2, r1$1 * cc1 - s2$1 * ss1);
          Caml_array.caml_array_set(py, i2, -s2$1 * cc1 - r1$1 * ss1);
          Caml_array.caml_array_set(px, i3, s3 * cc3 + r2$1 * ss3);
          Caml_array.caml_array_set(py, i3, r2$1 * cc3 - s3 * ss3);
          i0r = i0 + id | 0;
        };
        is = ((id << 1) - n2 | 0) + j | 0;
        id = (id << 2);
      };
    }
  }
  var is$1 = 1;
  var id$1 = 4;
  while(is$1 < n) {
    var i0r$1 = is$1;
    while(i0r$1 <= n) {
      var i0$1 = i0r$1;
      var i1$1 = i0$1 + 1 | 0;
      var r1$2 = Caml_array.caml_array_get(px, i0$1);
      Caml_array.caml_array_set(px, i0$1, r1$2 + Caml_array.caml_array_get(px, i1$1));
      Caml_array.caml_array_set(px, i1$1, r1$2 - Caml_array.caml_array_get(px, i1$1));
      var r1$3 = Caml_array.caml_array_get(py, i0$1);
      Caml_array.caml_array_set(py, i0$1, r1$3 + Caml_array.caml_array_get(py, i1$1));
      Caml_array.caml_array_set(py, i1$1, r1$3 - Caml_array.caml_array_get(py, i1$1));
      i0r$1 = i0$1 + id$1 | 0;
    };
    is$1 = (id$1 << 1) - 1 | 0;
    id$1 = (id$1 << 2);
  };
  var j$1 = 1;
  for(var i$2 = 1 ,i_finish = n - 1 | 0; i$2 <= i_finish; ++i$2){
    if (i$2 < j$1) {
      var xt = Caml_array.caml_array_get(px, j$1);
      Caml_array.caml_array_set(px, j$1, Caml_array.caml_array_get(px, i$2));
      Caml_array.caml_array_set(px, i$2, xt);
      var xt$1 = Caml_array.caml_array_get(py, j$1);
      Caml_array.caml_array_set(py, j$1, Caml_array.caml_array_get(py, i$2));
      Caml_array.caml_array_set(py, i$2, xt$1);
    }
    var k$1 = n / 2 | 0;
    while(k$1 < j$1) {
      j$1 = j$1 - k$1 | 0;
      k$1 = k$1 / 2 | 0;
    };
    j$1 = j$1 + k$1 | 0;
  }
  return n;
}

function test(np) {
  var enp = np;
  var npm = (np / 2 | 0) - 1 | 0;
  var pxr = Caml_array.caml_make_vect(np + 2 | 0, 0.0);
  var pxi = Caml_array.caml_make_vect(np + 2 | 0, 0.0);
  var t = 3.14159265358979323846 / enp;
  Caml_array.caml_array_set(pxr, 1, (enp - 1.0) * 0.5);
  Caml_array.caml_array_set(pxi, 1, 0.0);
  var n2 = np / 2 | 0;
  Caml_array.caml_array_set(pxr, n2 + 1 | 0, -0.5);
  Caml_array.caml_array_set(pxi, n2 + 1 | 0, 0.0);
  for(var i = 1; i <= npm; ++i){
    var j = np - i | 0;
    Caml_array.caml_array_set(pxr, i + 1 | 0, -0.5);
    Caml_array.caml_array_set(pxr, j + 1 | 0, -0.5);
    var z = t * i;
    var y = -0.5 * (Math.cos(z) / Math.sin(z));
    Caml_array.caml_array_set(pxi, i + 1 | 0, y);
    Caml_array.caml_array_set(pxi, j + 1 | 0, -y);
  }
  fft(pxr, pxi, np);
  var zr = 0.0;
  var zi = 0.0;
  var kr = 0;
  var ki = 0;
  for(var i$1 = 0 ,i_finish = np - 1 | 0; i$1 <= i_finish; ++i$1){
    var a = Math.abs(Caml_array.caml_array_get(pxr, i$1 + 1 | 0) - i$1);
    if (zr < a) {
      zr = a;
      kr = i$1;
    }
    var a$1 = Math.abs(Caml_array.caml_array_get(pxi, i$1 + 1 | 0));
    if (zi < a$1) {
      zi = a$1;
      ki = i$1;
    }
    
  }
  return /* tuple */[
          zr,
          zi
        ];
}

function run(i) {
  return test((1 << i));
}

function check(i, param) {
  var zi = param[1];
  var zr = param[0];
  if (Math.abs(zr) <= 1e-8 && Math.abs(zi) <= 1e-8) {
    return /* Ok */0;
  } else {
    return /* Error */["n: " + (Pervasives.string_of_int((1 << i)) + (" zr: " + (Pervasives.string_of_float(zr) + (" zi: " + Pervasives.string_of_float(zi)))))];
  }
}

function prepare(i) {
  return i;
}

var range = /* :: */[
  /* tuple */[
    /* Range */Block.__(0, [
        4,
        22
      ]),
    /* Short */0
  ],
  /* [] */0
];

var functions_000 = /* tuple */[
  "fft",
  /* Int */Block.__(1, [/* tuple */[
        run,
        prepare,
        check,
        range
      ]])
];

var functions = /* :: */[
  functions_000,
  /* [] */0
];

Micro_bench_types.add(functions);

var config = Micro_bench_run.Config[/* parse */1](/* () */0);

if (typeof config === "number") {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else if (config[0] !== 4103979) {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else {
  var conf = config[1];
  Fixture.run_n_times(1, (function () {
          var newrecord = conf.slice();
          return Micro_bench_run.run(/* Some */[/* Some */[/* `Run */[
                          4103979,
                          (newrecord[/* number_of_different_values */5] = 5, newrecord)
                        ]]], Micro_bench_types.functions(/* () */0));
        }));
}

var pi = 3.14159265358979323846;

exports.pi        = pi;
exports.tpi       = tpi;
exports.fft       = fft;
exports.test      = test;
exports.run       = run;
exports.check     = check;
exports.prepare   = prepare;
exports.range     = range;
exports.functions = functions;
/*  Not a pure module */
