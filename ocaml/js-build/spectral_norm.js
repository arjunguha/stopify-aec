// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Sys         = require("bs-platform/lib/js/sys.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Printf      = require("bs-platform/lib/js/printf.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function eval_A(i, j) {
  return 1 / (((Caml_int32.imul(i + j | 0, (i + j | 0) + 1 | 0) / 2 | 0) + i | 0) + 1 | 0);
}

function eval_A_times_u(u, v) {
  var n = v.length - 1 | 0;
  for(var i = 0; i <= n; ++i){
    var vi = 0;
    for(var j = 0; j <= n; ++j){
      vi += (eval_A(i, j) * Caml_array.caml_array_get(u, j));
    }
    Caml_array.caml_array_set(v, i, vi);
  }
  return /* () */0;
}

function eval_At_times_u(u, v) {
  var n = v.length - 1 | 0;
  for(var i = 0; i <= n; ++i){
    var vi = 0;
    for(var j = 0; j <= n; ++j){
      vi += (eval_A(j, i) * Caml_array.caml_array_get(u, j));
    }
    Caml_array.caml_array_set(v, i, vi);
  }
  return /* () */0;
}

function eval_AtA_times_u(u, v) {
  var w = Caml_array.caml_make_vect(u.length, 0.0);
  eval_A_times_u(u, w);
  return eval_At_times_u(w, v);
}

var n;

try {
  n = Caml_format.caml_int_of_string(Caml_array.caml_array_get(Sys.argv, 1));
}
catch (exn){
  n = 5500;
}

var u = Caml_array.caml_make_vect(n, 1.0);

var v = Caml_array.caml_make_vect(n, 0.0);

for(var i = 0; i <= 9; ++i){
  eval_AtA_times_u(u, v);
  eval_AtA_times_u(v, u);
}

var vv = 0.0;

var vBv = 0.0;

for(var i$1 = 0 ,i_finish = n - 1 | 0; i$1 <= i_finish; ++i$1){
  vv += (Caml_array.caml_array_get(v, i$1) * Caml_array.caml_array_get(v, i$1));
  vBv += (Caml_array.caml_array_get(u, i$1) * Caml_array.caml_array_get(v, i$1));
}

Curry._1(Printf.printf(/* Format */[
          /* Float */Block.__(8, [
              /* Float_f */0,
              /* Lit_padding */Block.__(0, [
                  /* Right */1,
                  0
                ]),
              /* Lit_precision */[9],
              /* Char_literal */Block.__(12, [
                  /* "\n" */10,
                  /* End_of_format */0
                ])
            ]),
          "%0.9f\n"
        ]), Math.sqrt(vBv / vv));

exports.eval_A           = eval_A;
exports.eval_A_times_u   = eval_A_times_u;
exports.eval_At_times_u  = eval_At_times_u;
exports.eval_AtA_times_u = eval_AtA_times_u;
/* n Not a pure module */
