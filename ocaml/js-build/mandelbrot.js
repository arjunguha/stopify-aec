// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block      = require("bs-platform/lib/js/block.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Printf     = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

var fw = 1000 / 2;

var fh = 1000 / 2;

Curry._2(Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "P4\n",
              /* Int */Block.__(4, [
                  /* Int_i */3,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* Char_literal */Block.__(12, [
                      /* " " */32,
                      /* Int */Block.__(4, [
                          /* Int_i */3,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ])
            ]),
          "P4\n%i %i\n"
        ]), 1000, 1000);

var red_h = 999;

var red_w = 999;

var $$byte = 0;

for(var y = 0; y <= red_h; ++y){
  var ci = y / fh - 1;
  for(var x = 0; x <= red_w; ++x){
    var cr = x / fw - 1.5;
    var zr = 0;
    var zi = 0;
    var trmti = 0;
    var n = 0;
    try {
      while(true) {
        zi = 2 * zr * zi + ci;
        zr = trmti + cr;
        var tr = zr * zr;
        var ti = zi * zi;
        if (tr + ti > 4) {
          $$byte = ($$byte << 1);
          throw Pervasives.Exit;
        } else {
          n = n + 1 | 0;
          if (n === 50) {
            $$byte = ($$byte << 1) | 1;
            throw Pervasives.Exit;
          } else {
            trmti = tr - ti;
          }
        }
      };
    }
    catch (exn){
      if (exn !== Pervasives.Exit) {
        throw exn;
      }
      
    }
    +(x % 8 === 7);
  }
  var rem = 0;
  +(rem !== 0);
}

var niter = 50;

var limit = 4;

exports.niter = niter;
exports.limit = limit;
/*  Not a pure module */
