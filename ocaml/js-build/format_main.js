// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block             = require("bs-platform/lib/js/block.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var Format            = require("bs-platform/lib/js/format.js");
var Printf            = require("bs-platform/lib/js/printf.js");
var Fixture           = require("../fixture.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var Micro_bench_types = require("../micro_bench_types.js");

function with_printf(b, fmt, _) {
  return Curry._5(b ? Printf.fprintf : Printf.ifprintf, fmt, /* Format */[
              /* Int */Block.__(4, [
                  /* Int_d */0,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* String_literal */Block.__(11, [
                      " + ",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              " = ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "%d + %d = %d"
            ], 1, 2, 3);
}

function log(b, fmt, s, k) {
  if (b) {
    return Curry._1(k, Printf.fprintf(fmt, s));
  } else {
    return 0;
  }
}

function with_printf_cont(b, fmt, _) {
  return log(b, fmt, /* Format */[
              /* Int */Block.__(4, [
                  /* Int_d */0,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* String_literal */Block.__(11, [
                      " + ",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              " = ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "%d + %d = %d"
            ], (function (k) {
                return Curry._3(k, 1, 2, 3);
              }));
}

function with_format(b, fmt, _) {
  return Curry._5(b ? Format.fprintf : Format.ifprintf, fmt, /* Format */[
              /* Int */Block.__(4, [
                  /* Int_d */0,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* String_literal */Block.__(11, [
                      " + ",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              " = ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ]),
              "%d + %d = %d"
            ], 1, 2, 3);
}

function with_format_pp(b, fmt, _) {
  return Curry._8(b ? Format.fprintf : Format.ifprintf, fmt, /* Format */[
              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                      " + ",
                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                              " = ",
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ])])
                    ])]),
              "%a + %a = %a"
            ], Format.pp_print_int, 1, Format.pp_print_int, 2, Format.pp_print_int, 3);
}

function logf(b, fmt, s, k) {
  if (b) {
    return Curry._1(k, Format.fprintf(fmt, s));
  } else {
    return 0;
  }
}

function with_format_pp_cont(b, fmt, _) {
  return logf(b, fmt, /* Format */[
              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                      " + ",
                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                              " = ",
                              /* Alpha */Block.__(15, [/* End_of_format */0])
                            ])])
                    ])]),
              "%a + %a = %a"
            ], (function (k) {
                return Curry._6(k, Format.pp_print_int, 1, Format.pp_print_int, 2, Format.pp_print_int, 3);
              }));
}

var dev_null_fmt = Format.formatter_of_out_channel(Pervasives.stdout);

function brackets(pp, fmt, x) {
  return Curry._2(Format.fprintf(fmt, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "[" */91,
                      /* Formatting_gen */Block.__(18, [
                          /* Open_box */Block.__(1, [/* Format */[
                                /* End_of_format */0,
                                ""
                              ]]),
                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                  /* Close_box */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "]" */93,
                                      /* End_of_format */0
                                    ])
                                ])])
                        ])
                    ]),
                  "[@[%a@]]"
                ]), pp, x);
}

function list(pp) {
  var partial_arg = /* Some */[(function (fmt, _) {
        return Format.fprintf(fmt, /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* ";" */59,
                        /* Formatting_lit */Block.__(17, [
                            /* Break */Block.__(0, [
                                "@ ",
                                1,
                                0
                              ]),
                            /* End_of_format */0
                          ])
                      ]),
                    ";@ "
                  ]);
      })];
  var partial_arg$1 = function (param, param$1) {
    return Format.pp_print_list(partial_arg, pp, param, param$1);
  };
  return (function (param, param$1) {
      return brackets(partial_arg$1, param, param$1);
    });
}

function complicated_format(k, name, x, _) {
  return Curry._5(k, /* Format */[
              /* Formatting_gen */Block.__(18, [
                  /* Open_box */Block.__(1, [/* Format */[
                        /* End_of_format */0,
                        ""
                      ]]),
                  /* Formatting_gen */Block.__(18, [
                      /* Open_box */Block.__(1, [/* Format */[
                            /* String_literal */Block.__(11, [
                                "<2>",
                                /* End_of_format */0
                              ]),
                            "<2>"
                          ]]),
                      /* String_literal */Block.__(11, [
                          "let ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* String_literal */Block.__(11, [
                                  " =",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* String_literal */Block.__(11, [
                                                      "in foo ",
                                                      /* String */Block.__(2, [
                                                          /* No_padding */0,
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])
                                                    ])
                                                ])
                                            ])])
                                    ])
                                ])
                            ])
                        ])
                    ])
                ]),
              "@[@[<2>let %s =@ %a@]@ in foo %s@]"
            ], name, list(list(Format.pp_print_int)), x, name);
}

function check() {
  return /* Ok */0;
}

var b = [/* true */1];

function make_simple_benchs(s, b) {
  var name = b ? "simple" + s : "simple_ignore" + s;
  return /* tuple */[
          name,
          /* Unit_group */Block.__(2, [/* tuple */[
                /* :: */[
                  /* tuple */[
                    "printf",
                    (function (param) {
                        return with_printf(b, Pervasives.stdout, param);
                      })
                  ],
                  /* :: */[
                    /* tuple */[
                      "printf_cont",
                      (function (param) {
                          return with_printf_cont(b, Pervasives.stdout, param);
                        })
                    ],
                    /* :: */[
                      /* tuple */[
                        "format",
                        (function (param) {
                            return with_format(b, dev_null_fmt, param);
                          })
                      ],
                      /* :: */[
                        /* tuple */[
                          "format_pp",
                          (function (param) {
                              return with_format_pp(b, dev_null_fmt, param);
                            })
                        ],
                        /* :: */[
                          /* tuple */[
                            "format_pp_cont",
                            (function (param) {
                                return with_format_pp_cont(b, dev_null_fmt, param);
                              })
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                check,
                /* Short */0
              ]])
        ];
}

function make_complicated_benchs(s, x) {
  var name = "complicated" + s;
  return /* tuple */[
          name,
          /* Unit_group */Block.__(2, [/* tuple */[
                /* :: */[
                  /* tuple */[
                    "direct",
                    (function (param) {
                        return complicated_format((function (param) {
                                      return Format.kfprintf((function () {
                                                    return "";
                                                  }), dev_null_fmt, param);
                                    }), s, x, param);
                      })
                  ],
                  /* :: */[
                    /* tuple */[
                      "str",
                      (function (param) {
                          return complicated_format(Format.asprintf, s, x, param);
                        })
                    ],
                    /* :: */[
                      /* tuple */[
                        "noop",
                        (function (param) {
                            return complicated_format((function (param) {
                                          return Format.ikfprintf((function () {
                                                        return "";
                                                      }), dev_null_fmt, param);
                                        }), s, x, param);
                          })
                      ],
                      /* [] */0
                    ]
                  ]
                ],
                check,
                /* Short */0
              ]])
        ];
}

Micro_bench_types.add(/* :: */[
      make_simple_benchs("", /* true */1),
      /* :: */[
        make_simple_benchs("", /* false */0),
        /* :: */[
          (b[0] = /* true */1, make_simple_benchs("_ref", b[0])),
          /* :: */[
            (b[0] = /* false */0, make_simple_benchs("_ref", b[0])),
            /* :: */[
              make_complicated_benchs("", /* :: */[
                    /* :: */[
                      1,
                      /* :: */[
                        2,
                        /* [] */0
                      ]
                    ],
                    /* :: */[
                      /* [] */0,
                      /* :: */[
                        /* :: */[
                          3,
                          /* :: */[
                            4,
                            /* :: */[
                              5,
                              /* [] */0
                            ]
                          ]
                        ],
                        /* [] */0
                      ]
                    ]
                  ]),
              /* :: */[
                make_complicated_benchs("_empty", /* [] */0),
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

Fixture.run_n_times(500, (function () {
        return Micro_bench_run.run(/* None */0, Micro_bench_types.functions(/* () */0));
      }));

var F = 0;

var P = 0;

var $$int = Format.pp_print_int;

var dev_null = Pervasives.stdout;

exports.F                       = F;
exports.P                       = P;
exports.$$int                   = $$int;
exports.with_printf             = with_printf;
exports.log                     = log;
exports.with_printf_cont        = with_printf_cont;
exports.with_format             = with_format;
exports.with_format_pp          = with_format_pp;
exports.logf                    = logf;
exports.with_format_pp_cont     = with_format_pp_cont;
exports.dev_null                = dev_null;
exports.dev_null_fmt            = dev_null_fmt;
exports.brackets                = brackets;
exports.list                    = list;
exports.complicated_format      = complicated_format;
exports.check                   = check;
exports.b                       = b;
exports.make_simple_benchs      = make_simple_benchs;
exports.make_complicated_benchs = make_complicated_benchs;
/* dev_null_fmt Not a pure module */
