// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var Js_exn                  = require("bs-platform/lib/js/js_exn.js");
var Fixture                 = require("../fixture.js");
var Caml_obj                = require("bs-platform/lib/js/caml_obj.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions         = require("bs-platform/lib/js/caml_exceptions.js");
var Micro_bench_run         = require("../micro_bench_run.js");
var Micro_bench_types       = require("../micro_bench_types.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function print_term(param) {
  if (param.tag) {
    Pervasives.print_string("(");
    Pervasives.print_string(param[0][/* name */0]);
    List.iter((function (t) {
            Pervasives.print_string(" ");
            return print_term(t);
          }), param[1]);
    return Pervasives.print_string(")");
  } else {
    Pervasives.print_string("v");
    return Pervasives.print_int(param[0]);
  }
}

var lemmas = [/* [] */0];

function get(name) {
  var _param = lemmas[0];
  while(true) {
    var param = _param;
    if (param) {
      var hd1 = param[0];
      if (hd1[/* name */0] === name) {
        return hd1;
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      var entry = /* record */[
        /* name */name,
        /* props : [] */0
      ];
      lemmas[0] = /* :: */[
        entry,
        lemmas[0]
      ];
      return entry;
    }
  };
}

function add_lemma(param) {
  var exit = 0;
  if (param.tag) {
    var match = param[1];
    if (match) {
      var left = match[0];
      if (left.tag) {
        var match$1 = match[1];
        if (match$1) {
          if (match$1[1]) {
            exit = 1;
          } else {
            var headl = left[0];
            headl[/* props */1] = /* :: */[
              /* tuple */[
                left,
                match$1[0]
              ],
              headl[/* props */1]
            ];
            return /* () */0;
          }
        } else {
          exit = 1;
        }
      } else {
        exit = 1;
      }
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "boyer.ml",
            50,
            8
          ]
        ];
  }
  
}

function get_binding(v, list) {
  var _param = list;
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      if (v === match[0]) {
        return match[1];
      } else {
        _param = param[1];
        continue ;
        
      }
    } else {
      return Pervasives.failwith("unbound");
    }
  };
}

function apply_subst(alist, term) {
  var as_rec = function (param) {
    if (param.tag) {
      return /* Prop */Block.__(1, [
                param[0],
                List.map(as_rec, param[1])
              ]);
    } else {
      try {
        return get_binding(param[0], alist);
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Caml_builtin_exceptions.failure) {
          return term;
        } else {
          throw exn;
        }
      }
    }
  };
  return as_rec(term);
}

var Unify = Caml_exceptions.create("Boyer.Unify");

function unify1_lst(_l1, _l2, _unify_subst) {
  while(true) {
    var unify_subst = _unify_subst;
    var l2 = _l2;
    var l1 = _l1;
    if (l1) {
      if (l2) {
        _unify_subst = unify1(l1[0], l2[0], unify_subst);
        _l2 = l2[1];
        _l1 = l1[1];
        continue ;
        
      } else {
        throw Unify;
      }
    } else if (l2) {
      throw Unify;
    } else {
      return unify_subst;
    }
  };
}

function unify1(term1, term2, unify_subst) {
  if (term2.tag) {
    if (term1.tag) {
      if (term1[0] === term2[0]) {
        return unify1_lst(term1[1], term2[1], unify_subst);
      } else {
        throw Unify;
      }
    } else {
      throw Unify;
    }
  } else {
    var v = term2[0];
    try {
      if (Caml_obj.caml_equal(get_binding(v, unify_subst), term1)) {
        return unify_subst;
      } else {
        throw Unify;
      }
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.failure) {
        return /* :: */[
                /* Bind */[
                  v,
                  term1
                ],
                unify_subst
              ];
      } else {
        throw exn;
      }
    }
  }
}

function unify(term1, term2) {
  return unify1(term1, term2, /* [] */0);
}

function rewrite(term) {
  if (term.tag) {
    var head = term[0];
    return rewrite_with_lemmas(/* Prop */Block.__(1, [
                  head,
                  List.map(rewrite, term[1])
                ]), head[/* props */1]);
  } else {
    return term;
  }
}

function rewrite_with_lemmas(term, _lemmas) {
  while(true) {
    var lemmas = _lemmas;
    if (lemmas) {
      var match = lemmas[0];
      try {
        return rewrite(apply_subst(unify1(term, match[0], /* [] */0), match[1]));
      }
      catch (exn){
        if (exn === Unify) {
          _lemmas = lemmas[1];
          continue ;
          
        } else {
          throw exn;
        }
      }
    } else {
      return term;
    }
  };
}

function cterm_to_term(param) {
  if (param.tag) {
    return /* Prop */Block.__(1, [
              get(param[0]),
              List.map(cterm_to_term, param[1])
            ]);
  } else {
    return /* Var */Block.__(0, [param[0]]);
  }
}

function add(t) {
  return add_lemma(cterm_to_term(t));
}

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "compile",
                  /* :: */[
                    /* CVar */Block.__(0, [5]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "reverse",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "codegen",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "optimize",
                                /* :: */[
                                  /* CVar */Block.__(0, [5]),
                                  /* [] */0
                                ]
                              ]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "nil",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "eqp",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "equal",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "fix",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "fix",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "gt",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "lt",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CVar */Block.__(0, [23]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "le",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "ge",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CVar */Block.__(0, [23]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "ge",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "le",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CVar */Block.__(0, [23]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "boolean",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "or",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "equal",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "true",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "equal",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "false",
                                    /* [] */0
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "iff",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "implies",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "implies",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "even1",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "true",
                            /* [] */0
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "odd",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "sub1",
                                    /* :: */[
                                      /* CVar */Block.__(0, [23]),
                                      /* [] */0
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "countps_",
                  /* :: */[
                    /* CVar */Block.__(0, [11]),
                    /* :: */[
                      /* CVar */Block.__(0, [15]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "countps_loop",
                    /* :: */[
                      /* CVar */Block.__(0, [11]),
                      /* :: */[
                        /* CVar */Block.__(0, [15]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "zero",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "fact_",
                  /* :: */[
                    /* CVar */Block.__(0, [8]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fact_loop",
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "one",
                            /* [] */0
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "reverse_",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "reverse_loop",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "nil",
                            /* [] */0
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "divides",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zerop",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "remainder",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "assume_true",
                  /* :: */[
                    /* CVar */Block.__(0, [21]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "cons",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "cons",
                          /* :: */[
                            /* CVar */Block.__(0, [21]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "true",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [0]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "assume_false",
                  /* :: */[
                    /* CVar */Block.__(0, [21]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "cons",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "cons",
                          /* :: */[
                            /* CVar */Block.__(0, [21]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "false",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [0]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "tautology_checker",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "tautologyp",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "normalize",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "nil",
                            /* [] */0
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "falsify",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "falsify1",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "normalize",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "nil",
                            /* [] */0
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "prime",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "not",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "zerop",
                                /* :: */[
                                  /* CVar */Block.__(0, [23]),
                                  /* [] */0
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "not",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "equal",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "add1",
                                          /* :: */[
                                            /* CProp */Block.__(1, [
                                                "zero",
                                                /* [] */0
                                              ]),
                                            /* [] */0
                                          ]
                                        ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "prime1",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "sub1",
                                      /* :: */[
                                        /* CVar */Block.__(0, [23]),
                                        /* [] */0
                                      ]
                                    ]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "and",
                  /* :: */[
                    /* CVar */Block.__(0, [15]),
                    /* :: */[
                      /* CVar */Block.__(0, [16]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CVar */Block.__(0, [15]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "if",
                            /* :: */[
                              /* CVar */Block.__(0, [16]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "true",
                                    /* [] */0
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "false",
                                      /* [] */0
                                    ]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "false",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "or",
                  /* :: */[
                    /* CVar */Block.__(0, [15]),
                    /* :: */[
                      /* CVar */Block.__(0, [16]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CVar */Block.__(0, [15]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "true",
                            /* [] */0
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "if",
                              /* :: */[
                                /* CVar */Block.__(0, [16]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "true",
                                      /* [] */0
                                    ]),
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "false",
                                        /* [] */0
                                      ]),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "false",
                                /* [] */0
                              ]),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "not",
                  /* :: */[
                    /* CVar */Block.__(0, [15]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CVar */Block.__(0, [15]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "false",
                            /* [] */0
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "true",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "implies",
                  /* :: */[
                    /* CVar */Block.__(0, [15]),
                    /* :: */[
                      /* CVar */Block.__(0, [16]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CVar */Block.__(0, [15]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "if",
                            /* :: */[
                              /* CVar */Block.__(0, [16]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "true",
                                    /* [] */0
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "false",
                                      /* [] */0
                                    ]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "true",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "fix",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "numberp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [23]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "zero",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "if",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "if",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* :: */[
                              /* CVar */Block.__(0, [2]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [3]),
                      /* :: */[
                        /* CVar */Block.__(0, [4]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "if",
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* :: */[
                                /* CVar */Block.__(0, [3]),
                                /* :: */[
                                  /* CVar */Block.__(0, [4]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "if",
                              /* :: */[
                                /* CVar */Block.__(0, [2]),
                                /* :: */[
                                  /* CVar */Block.__(0, [3]),
                                  /* :: */[
                                    /* CVar */Block.__(0, [4]),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "zerop",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "or",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "equal",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "zero",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "not",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "numberp",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "plus",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "plus",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* :: */[
                                /* CVar */Block.__(0, [25]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zero",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "zerop",
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zero",
                    /* [] */0
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CVar */Block.__(0, [2]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "equal",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "fix",
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "fix",
                            /* :: */[
                              /* CVar */Block.__(0, [2]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "zero",
                        /* [] */0
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "difference",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "not",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "gt",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "difference",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "numberp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "or",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "equal",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "zero",
                                          /* [] */0
                                        ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "zerop",
                                    /* :: */[
                                      /* CVar */Block.__(0, [24]),
                                      /* [] */0
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "meaning",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus_tree",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "append",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* :: */[
                                  /* CVar */Block.__(0, [24]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "meaning",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "plus_tree",
                                /* :: */[
                                  /* CVar */Block.__(0, [23]),
                                  /* [] */0
                                ]
                              ]),
                            /* :: */[
                              /* CVar */Block.__(0, [0]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "meaning",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "plus_tree",
                                  /* :: */[
                                    /* CVar */Block.__(0, [24]),
                                    /* [] */0
                                  ]
                                ]),
                              /* :: */[
                                /* CVar */Block.__(0, [0]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "meaning",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus_tree",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "plus_fringe",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fix",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "meaning",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [0]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "append",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "append",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "append",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* :: */[
                                /* CVar */Block.__(0, [25]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "reverse",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "append",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "reverse",
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "reverse",
                            /* :: */[
                              /* CVar */Block.__(0, [0]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "times",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "times",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [25]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "times",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "times",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "times",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* :: */[
                                /* CVar */Block.__(0, [25]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zero",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "or",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "zerop",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "exec",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [15]),
                      /* :: */[
                        /* CVar */Block.__(0, [4]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "exec",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "exec",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [15]),
                                /* :: */[
                                  /* CVar */Block.__(0, [4]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CVar */Block.__(0, [4]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "mc_flatten",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "append",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "flatten",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [24]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "member",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "append",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "or",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "member",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [0]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "member",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [1]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "member",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "reverse",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "member",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CVar */Block.__(0, [24]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "length",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "reverse",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* [] */0
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "length",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "member",
                  /* :: */[
                    /* CVar */Block.__(0, [0]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "intersect",
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* :: */[
                              /* CVar */Block.__(0, [2]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "member",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "member",
                            /* :: */[
                              /* CVar */Block.__(0, [0]),
                              /* :: */[
                                /* CVar */Block.__(0, [2]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "nth",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "zero",
                        /* [] */0
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zero",
                    /* [] */0
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "exp",
                  /* :: */[
                    /* CVar */Block.__(0, [8]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [9]),
                            /* :: */[
                              /* CVar */Block.__(0, [10]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "times",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "exp",
                          /* :: */[
                            /* CVar */Block.__(0, [8]),
                            /* :: */[
                              /* CVar */Block.__(0, [9]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "exp",
                            /* :: */[
                              /* CVar */Block.__(0, [8]),
                              /* :: */[
                                /* CVar */Block.__(0, [10]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "exp",
                  /* :: */[
                    /* CVar */Block.__(0, [8]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [9]),
                            /* :: */[
                              /* CVar */Block.__(0, [10]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "exp",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "exp",
                          /* :: */[
                            /* CVar */Block.__(0, [8]),
                            /* :: */[
                              /* CVar */Block.__(0, [9]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [10]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "reverse_loop",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "append",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "reverse",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [24]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "reverse_loop",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "nil",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "reverse",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "count_list",
                  /* :: */[
                    /* CVar */Block.__(0, [25]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "sort_lp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "count_list",
                          /* :: */[
                            /* CVar */Block.__(0, [25]),
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "count_list",
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* :: */[
                                /* CVar */Block.__(0, [24]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "append",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CVar */Block.__(0, [2]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "equal",
                    /* :: */[
                      /* CVar */Block.__(0, [1]),
                      /* :: */[
                        /* CVar */Block.__(0, [2]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "plus",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "remainder",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "quotient",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* :: */[
                                      /* CVar */Block.__(0, [24]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fix",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "power_eval",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "big_plus",
                        /* :: */[
                          /* CVar */Block.__(0, [11]),
                          /* :: */[
                            /* CVar */Block.__(0, [8]),
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [1]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "power_eval",
                          /* :: */[
                            /* CVar */Block.__(0, [11]),
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [8]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "power_eval",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "big_plus",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CVar */Block.__(0, [8]),
                              /* :: */[
                                /* CVar */Block.__(0, [1]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [1]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "plus",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "power_eval",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* :: */[
                                      /* CVar */Block.__(0, [1]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "power_eval",
                                    /* :: */[
                                      /* CVar */Block.__(0, [24]),
                                      /* :: */[
                                        /* CVar */Block.__(0, [1]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "remainder",
                  /* :: */[
                    /* CVar */Block.__(0, [24]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "one",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zero",
                    /* [] */0
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "remainder",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "not",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "remainder",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zero",
                    /* [] */0
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "quotient",
                        /* :: */[
                          /* CVar */Block.__(0, [8]),
                          /* :: */[
                            /* CVar */Block.__(0, [9]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "not",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "zerop",
                                /* :: */[
                                  /* CVar */Block.__(0, [8]),
                                  /* [] */0
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "or",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "zerop",
                                  /* :: */[
                                    /* CVar */Block.__(0, [9]),
                                    /* [] */0
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "not",
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "equal",
                                          /* :: */[
                                            /* CVar */Block.__(0, [9]),
                                            /* :: */[
                                              /* CProp */Block.__(1, [
                                                  "one",
                                                  /* [] */0
                                                ]),
                                              /* [] */0
                                            ]
                                          ]
                                        ]),
                                      /* [] */0
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "remainder",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "not",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "zerop",
                                /* :: */[
                                  /* CVar */Block.__(0, [24]),
                                  /* [] */0
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "not",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "zerop",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "not",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "lt",
                                    /* :: */[
                                      /* CVar */Block.__(0, [23]),
                                      /* :: */[
                                        /* CVar */Block.__(0, [24]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "power_eval",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "power_rep",
                        /* :: */[
                          /* CVar */Block.__(0, [8]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [1]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fix",
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "power_eval",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "big_plus",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "power_rep",
                              /* :: */[
                                /* CVar */Block.__(0, [8]),
                                /* :: */[
                                  /* CVar */Block.__(0, [1]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "power_rep",
                                /* :: */[
                                  /* CVar */Block.__(0, [9]),
                                  /* :: */[
                                    /* CVar */Block.__(0, [1]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "zero",
                                  /* [] */0
                                ]),
                              /* :: */[
                                /* CVar */Block.__(0, [1]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [1]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* :: */[
                        /* CVar */Block.__(0, [9]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "gcd",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "gcd",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CVar */Block.__(0, [23]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "nth",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "append",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "nth",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CVar */Block.__(0, [8]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "nth",
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "difference",
                                    /* :: */[
                                      /* CVar */Block.__(0, [8]),
                                      /* :: */[
                                        /* CProp */Block.__(1, [
                                            "length",
                                            /* :: */[
                                              /* CVar */Block.__(0, [0]),
                                              /* [] */0
                                            ]
                                          ]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fix",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [24]),
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fix",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "difference",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CVar */Block.__(0, [25]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "times",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "difference",
                          /* :: */[
                            /* CVar */Block.__(0, [2]),
                            /* :: */[
                              /* CVar */Block.__(0, [22]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "difference",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [2]),
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "times",
                            /* :: */[
                              /* CVar */Block.__(0, [22]),
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "remainder",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [25]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zero",
                    /* [] */0
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [1]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "plus",
                                /* :: */[
                                  /* CVar */Block.__(0, [0]),
                                  /* :: */[
                                    /* CVar */Block.__(0, [2]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CVar */Block.__(0, [1]),
                      /* :: */[
                        /* CVar */Block.__(0, [2]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "add1",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "plus",
                              /* :: */[
                                /* CVar */Block.__(0, [24]),
                                /* :: */[
                                  /* CVar */Block.__(0, [25]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "add1",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "lt",
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* :: */[
                        /* CVar */Block.__(0, [25]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [25]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "not",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "zerop",
                                /* :: */[
                                  /* CVar */Block.__(0, [25]),
                                  /* [] */0
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "lt",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [24]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CVar */Block.__(0, [24]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "not",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "gcd",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [25]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "times",
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "gcd",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [24]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "value",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "normalize",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "value",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CVar */Block.__(0, [0]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "flatten",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "cons",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "nil",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "nlistp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "equal",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [24]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "listp",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "gother",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* [] */0
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "listp",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "samefringe",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "equal",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "flatten",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "flatten",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "greatest_factor",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zero",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "or",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "zerop",
                                /* :: */[
                                  /* CVar */Block.__(0, [24]),
                                  /* [] */0
                                ]
                              ]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "equal",
                                  /* :: */[
                                    /* CVar */Block.__(0, [24]),
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "one",
                                          /* [] */0
                                        ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "equal",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "zero",
                                    /* [] */0
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "greatest_factor",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "one",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "equal",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "one",
                            /* [] */0
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "numberp",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "greatest_factor",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "not",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "and",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "or",
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "zerop",
                                      /* :: */[
                                        /* CVar */Block.__(0, [24]),
                                        /* [] */0
                                      ]
                                    ]),
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "equal",
                                        /* :: */[
                                          /* CVar */Block.__(0, [24]),
                                          /* :: */[
                                            /* CProp */Block.__(1, [
                                                "one",
                                                /* [] */0
                                              ]),
                                            /* [] */0
                                          ]
                                        ]
                                      ]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "not",
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "numberp",
                                        /* :: */[
                                          /* CVar */Block.__(0, [23]),
                                          /* [] */0
                                        ]
                                      ]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "times_list",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "times",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times_list",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "times_list",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "prime_list",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "prime_list",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "prime_list",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CVar */Block.__(0, [25]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [22]),
                            /* :: */[
                              /* CVar */Block.__(0, [25]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "numberp",
                          /* :: */[
                            /* CVar */Block.__(0, [25]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "or",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "equal",
                                  /* :: */[
                                    /* CVar */Block.__(0, [25]),
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "zero",
                                          /* [] */0
                                        ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "equal",
                                    /* :: */[
                                      /* CVar */Block.__(0, [22]),
                                      /* :: */[
                                        /* CProp */Block.__(1, [
                                            "one",
                                            /* [] */0
                                          ]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "ge",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "not",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "lt",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "or",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "equal",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "zero",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "and",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "numberp",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* [] */0
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "equal",
                                    /* :: */[
                                      /* CVar */Block.__(0, [24]),
                                      /* :: */[
                                        /* CProp */Block.__(1, [
                                            "one",
                                            /* [] */0
                                          ]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "remainder",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [24]),
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "zero",
                    /* [] */0
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "one",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "and",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "not",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "equal",
                                /* :: */[
                                  /* CVar */Block.__(0, [0]),
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "zero",
                                        /* [] */0
                                      ]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "not",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "equal",
                                  /* :: */[
                                    /* CVar */Block.__(0, [1]),
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "zero",
                                          /* [] */0
                                        ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "numberp",
                              /* :: */[
                                /* CVar */Block.__(0, [0]),
                                /* [] */0
                              ]
                            ]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "numberp",
                                /* :: */[
                                  /* CVar */Block.__(0, [1]),
                                  /* [] */0
                                ]
                              ]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "equal",
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "sub1",
                                        /* :: */[
                                          /* CVar */Block.__(0, [0]),
                                          /* [] */0
                                        ]
                                      ]),
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "zero",
                                          /* [] */0
                                        ]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "equal",
                                    /* :: */[
                                      /* CProp */Block.__(1, [
                                          "sub1",
                                          /* :: */[
                                            /* CVar */Block.__(0, [1]),
                                            /* [] */0
                                          ]
                                        ]),
                                      /* :: */[
                                        /* CProp */Block.__(1, [
                                            "zero",
                                            /* [] */0
                                          ]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "length",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "delete",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* :: */[
                                  /* CVar */Block.__(0, [11]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "length",
                          /* :: */[
                            /* CVar */Block.__(0, [11]),
                            /* [] */0
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "member",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CVar */Block.__(0, [11]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "sort2",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "delete",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [11]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "delete",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "sort2",
                            /* :: */[
                              /* CVar */Block.__(0, [11]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "dsort",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "sort2",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "length",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "cons",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "cons",
                                /* :: */[
                                  /* CVar */Block.__(0, [1]),
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "cons",
                                        /* :: */[
                                          /* CVar */Block.__(0, [2]),
                                          /* :: */[
                                            /* CProp */Block.__(1, [
                                                "cons",
                                                /* :: */[
                                                  /* CVar */Block.__(0, [3]),
                                                  /* :: */[
                                                    /* CProp */Block.__(1, [
                                                        "cons",
                                                        /* :: */[
                                                          /* CVar */Block.__(0, [4]),
                                                          /* :: */[
                                                            /* CProp */Block.__(1, [
                                                                "cons",
                                                                /* :: */[
                                                                  /* CVar */Block.__(0, [5]),
                                                                  /* :: */[
                                                                    /* CVar */Block.__(0, [6]),
                                                                    /* [] */0
                                                                  ]
                                                                ]
                                                              ]),
                                                            /* [] */0
                                                          ]
                                                        ]
                                                      ]),
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]),
                                            /* [] */0
                                          ]
                                        ]
                                      ]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "six",
                          /* [] */0
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "length",
                            /* :: */[
                              /* CVar */Block.__(0, [6]),
                              /* [] */0
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "difference",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "add1",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "add1",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "two",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "fix",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "quotient",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "plus",
                                /* :: */[
                                  /* CVar */Block.__(0, [23]),
                                  /* :: */[
                                    /* CVar */Block.__(0, [24]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "two",
                          /* [] */0
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "plus",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "quotient",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "two",
                                    /* [] */0
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "sigma",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "zero",
                        /* [] */0
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "quotient",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "times",
                          /* :: */[
                            /* CVar */Block.__(0, [8]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "add1",
                                  /* :: */[
                                    /* CVar */Block.__(0, [8]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "two",
                            /* [] */0
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "plus",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "add1",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "numberp",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "add1",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "plus",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* :: */[
                                      /* CVar */Block.__(0, [24]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "add1",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "difference",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "difference",
                          /* :: */[
                            /* CVar */Block.__(0, [25]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "lt",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "not",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "lt",
                                  /* :: */[
                                    /* CVar */Block.__(0, [24]),
                                    /* :: */[
                                      /* CVar */Block.__(0, [25]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "if",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "lt",
                                    /* :: */[
                                      /* CVar */Block.__(0, [25]),
                                      /* :: */[
                                        /* CVar */Block.__(0, [24]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "not",
                                      /* :: */[
                                        /* CProp */Block.__(1, [
                                            "lt",
                                            /* :: */[
                                              /* CVar */Block.__(0, [24]),
                                              /* :: */[
                                                /* CVar */Block.__(0, [23]),
                                                /* [] */0
                                              ]
                                            ]
                                          ]),
                                        /* [] */0
                                      ]
                                    ]),
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "equal",
                                        /* :: */[
                                          /* CProp */Block.__(1, [
                                              "fix",
                                              /* :: */[
                                                /* CVar */Block.__(0, [23]),
                                                /* [] */0
                                              ]
                                            ]),
                                          /* :: */[
                                            /* CProp */Block.__(1, [
                                                "fix",
                                                /* :: */[
                                                  /* CVar */Block.__(0, [25]),
                                                  /* [] */0
                                                ]
                                              ]),
                                            /* [] */0
                                          ]
                                        ]
                                      ]),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "meaning",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus_tree",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "delete",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* :: */[
                                  /* CVar */Block.__(0, [24]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [0]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "member",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "difference",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "meaning",
                                  /* :: */[
                                    /* CProp */Block.__(1, [
                                        "plus_tree",
                                        /* :: */[
                                          /* CVar */Block.__(0, [24]),
                                          /* [] */0
                                        ]
                                      ]),
                                    /* :: */[
                                      /* CVar */Block.__(0, [0]),
                                      /* [] */0
                                    ]
                                  ]
                                ]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "meaning",
                                    /* :: */[
                                      /* CVar */Block.__(0, [23]),
                                      /* :: */[
                                        /* CVar */Block.__(0, [0]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "meaning",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "plus_tree",
                                    /* :: */[
                                      /* CVar */Block.__(0, [24]),
                                      /* [] */0
                                    ]
                                  ]),
                                /* :: */[
                                  /* CVar */Block.__(0, [0]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "times",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "add1",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "numberp",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "plus",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "times",
                                    /* :: */[
                                      /* CVar */Block.__(0, [23]),
                                      /* :: */[
                                        /* CVar */Block.__(0, [24]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "fix",
                                      /* :: */[
                                        /* CVar */Block.__(0, [23]),
                                        /* [] */0
                                      ]
                                    ]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "nth",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "nil",
                        /* [] */0
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [8]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [8]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "nil",
                            /* [] */0
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "zero",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "last",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "append",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "listp",
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "last",
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "if",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "listp",
                                    /* :: */[
                                      /* CVar */Block.__(0, [0]),
                                      /* [] */0
                                    ]
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "cons",
                                      /* :: */[
                                        /* CProp */Block.__(1, [
                                            "car",
                                            /* :: */[
                                              /* CProp */Block.__(1, [
                                                  "last",
                                                  /* :: */[
                                                    /* CVar */Block.__(0, [0]),
                                                    /* [] */0
                                                  ]
                                                ]),
                                              /* [] */0
                                            ]
                                          ]),
                                        /* :: */[
                                          /* CVar */Block.__(0, [1]),
                                          /* [] */0
                                        ]
                                      ]
                                    ]),
                                  /* :: */[
                                    /* CVar */Block.__(0, [1]),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "equal",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "lt",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [25]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "lt",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "equal",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "true",
                                  /* [] */0
                                ]),
                              /* :: */[
                                /* CVar */Block.__(0, [25]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "equal",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "false",
                                    /* [] */0
                                  ]),
                                /* :: */[
                                  /* CVar */Block.__(0, [25]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "assignment",
                  /* :: */[
                    /* CVar */Block.__(0, [23]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "append",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CVar */Block.__(0, [1]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "assignedp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* :: */[
                              /* CVar */Block.__(0, [0]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "assignment",
                            /* :: */[
                              /* CVar */Block.__(0, [23]),
                              /* :: */[
                                /* CVar */Block.__(0, [0]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "assignment",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* :: */[
                                  /* CVar */Block.__(0, [1]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "car",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "gother",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* [] */0
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "listp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "car",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "flatten",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "zero",
                              /* [] */0
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "flatten",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "cdr",
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "gother",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]),
                    /* [] */0
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "listp",
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "cdr",
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "flatten",
                                  /* :: */[
                                    /* CVar */Block.__(0, [23]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "cons",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "zero",
                                    /* [] */0
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "nil",
                                      /* [] */0
                                    ]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "quotient",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [24]),
                          /* :: */[
                            /* CVar */Block.__(0, [23]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CVar */Block.__(0, [24]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "zerop",
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]),
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "zero",
                            /* [] */0
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "fix",
                              /* :: */[
                                /* CVar */Block.__(0, [23]),
                                /* [] */0
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

add_lemma(cterm_to_term(/* CProp */Block.__(1, [
            "equal",
            /* :: */[
              /* CProp */Block.__(1, [
                  "get",
                  /* :: */[
                    /* CVar */Block.__(0, [9]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "set",
                          /* :: */[
                            /* CVar */Block.__(0, [8]),
                            /* :: */[
                              /* CVar */Block.__(0, [21]),
                              /* :: */[
                                /* CVar */Block.__(0, [12]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* :: */[
                /* CProp */Block.__(1, [
                    "if",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "eqp",
                          /* :: */[
                            /* CVar */Block.__(0, [9]),
                            /* :: */[
                              /* CVar */Block.__(0, [8]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* :: */[
                        /* CVar */Block.__(0, [21]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "get",
                              /* :: */[
                                /* CVar */Block.__(0, [9]),
                                /* :: */[
                                  /* CVar */Block.__(0, [12]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
                /* [] */0
              ]
            ]
          ])));

function truep(x, lst) {
  if (!x.tag || x[0][/* name */0] !== "true") {
    return List.mem(x, lst);
  } else {
    return /* true */1;
  }
}

function falsep(x, lst) {
  if (!x.tag || x[0][/* name */0] !== "false") {
    return List.mem(x, lst);
  } else {
    return /* true */1;
  }
}

function tautologyp(_x, true_lst, _false_lst) {
  while(true) {
    var false_lst = _false_lst;
    var x = _x;
    if (truep(x, true_lst)) {
      return /* true */1;
    } else if (falsep(x, false_lst)) {
      return /* false */0;
    } else {
      var exit = 0;
      if (x.tag) {
        var match = x[1];
        if (match) {
          var match$1 = match[1];
          if (match$1) {
            var match$2 = match$1[1];
            if (match$2) {
              if (match$2[1]) {
                exit = 1;
              } else if (x[0][/* name */0] === "if") {
                var no = match$2[0];
                var yes = match$1[0];
                var test = match[0];
                if (truep(test, true_lst)) {
                  _x = yes;
                  continue ;
                  
                } else if (falsep(test, false_lst)) {
                  _x = no;
                  continue ;
                  
                } else if (tautologyp(yes, /* :: */[
                        test,
                        true_lst
                      ], false_lst)) {
                  _false_lst = /* :: */[
                    test,
                    false_lst
                  ];
                  _x = no;
                  continue ;
                  
                } else {
                  return /* false */0;
                }
              } else {
                return /* false */0;
              }
            } else {
              exit = 1;
            }
          } else {
            exit = 1;
          }
        } else {
          exit = 1;
        }
      } else {
        return /* false */0;
      }
      if (exit === 1) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "boyer.ml",
                821,
                10
              ]
            ];
      }
      
    }
  };
}

function tautp(x) {
  var y = rewrite(x);
  return tautologyp(y, /* [] */0, /* [] */0);
}

var subst_000 = /* Bind */[
  23,
  cterm_to_term(/* CProp */Block.__(1, [
          "f",
          /* :: */[
            /* CProp */Block.__(1, [
                "plus",
                /* :: */[
                  /* CProp */Block.__(1, [
                      "plus",
                      /* :: */[
                        /* CVar */Block.__(0, [0]),
                        /* :: */[
                          /* CVar */Block.__(0, [1]),
                          /* [] */0
                        ]
                      ]
                    ]),
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "plus",
                        /* :: */[
                          /* CVar */Block.__(0, [2]),
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "zero",
                                /* [] */0
                              ]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]
              ]),
            /* [] */0
          ]
        ]))
];

var subst_001 = /* :: */[
  /* Bind */[
    24,
    cterm_to_term(/* CProp */Block.__(1, [
            "f",
            /* :: */[
              /* CProp */Block.__(1, [
                  "times",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "times",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "plus",
                          /* :: */[
                            /* CVar */Block.__(0, [2]),
                            /* :: */[
                              /* CVar */Block.__(0, [3]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]),
              /* [] */0
            ]
          ]))
  ],
  /* :: */[
    /* Bind */[
      25,
      cterm_to_term(/* CProp */Block.__(1, [
              "f",
              /* :: */[
                /* CProp */Block.__(1, [
                    "reverse",
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "append",
                          /* :: */[
                            /* CProp */Block.__(1, [
                                "append",
                                /* :: */[
                                  /* CVar */Block.__(0, [0]),
                                  /* :: */[
                                    /* CVar */Block.__(0, [1]),
                                    /* [] */0
                                  ]
                                ]
                              ]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "nil",
                                  /* [] */0
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]),
                /* [] */0
              ]
            ]))
    ],
    /* :: */[
      /* Bind */[
        20,
        cterm_to_term(/* CProp */Block.__(1, [
                "equal",
                /* :: */[
                  /* CProp */Block.__(1, [
                      "plus",
                      /* :: */[
                        /* CVar */Block.__(0, [0]),
                        /* :: */[
                          /* CVar */Block.__(0, [1]),
                          /* [] */0
                        ]
                      ]
                    ]),
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "difference",
                        /* :: */[
                          /* CVar */Block.__(0, [23]),
                          /* :: */[
                            /* CVar */Block.__(0, [24]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* [] */0
                  ]
                ]
              ]))
      ],
      /* :: */[
        /* Bind */[
          22,
          cterm_to_term(/* CProp */Block.__(1, [
                  "lt",
                  /* :: */[
                    /* CProp */Block.__(1, [
                        "remainder",
                        /* :: */[
                          /* CVar */Block.__(0, [0]),
                          /* :: */[
                            /* CVar */Block.__(0, [1]),
                            /* [] */0
                          ]
                        ]
                      ]),
                    /* :: */[
                      /* CProp */Block.__(1, [
                          "member",
                          /* :: */[
                            /* CVar */Block.__(0, [0]),
                            /* :: */[
                              /* CProp */Block.__(1, [
                                  "length",
                                  /* :: */[
                                    /* CVar */Block.__(0, [1]),
                                    /* [] */0
                                  ]
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]),
                      /* [] */0
                    ]
                  ]
                ]))
        ],
        /* [] */0
      ]
    ]
  ]
];

var subst = /* :: */[
  subst_000,
  subst_001
];

var term = cterm_to_term(/* CProp */Block.__(1, [
        "implies",
        /* :: */[
          /* CProp */Block.__(1, [
              "and",
              /* :: */[
                /* CProp */Block.__(1, [
                    "implies",
                    /* :: */[
                      /* CVar */Block.__(0, [23]),
                      /* :: */[
                        /* CVar */Block.__(0, [24]),
                        /* [] */0
                      ]
                    ]
                  ]),
                /* :: */[
                  /* CProp */Block.__(1, [
                      "and",
                      /* :: */[
                        /* CProp */Block.__(1, [
                            "implies",
                            /* :: */[
                              /* CVar */Block.__(0, [24]),
                              /* :: */[
                                /* CVar */Block.__(0, [25]),
                                /* [] */0
                              ]
                            ]
                          ]),
                        /* :: */[
                          /* CProp */Block.__(1, [
                              "and",
                              /* :: */[
                                /* CProp */Block.__(1, [
                                    "implies",
                                    /* :: */[
                                      /* CVar */Block.__(0, [25]),
                                      /* :: */[
                                        /* CVar */Block.__(0, [20]),
                                        /* [] */0
                                      ]
                                    ]
                                  ]),
                                /* :: */[
                                  /* CProp */Block.__(1, [
                                      "implies",
                                      /* :: */[
                                        /* CVar */Block.__(0, [20]),
                                        /* :: */[
                                          /* CVar */Block.__(0, [22]),
                                          /* [] */0
                                        ]
                                      ]
                                    ]),
                                  /* [] */0
                                ]
                              ]
                            ]),
                          /* [] */0
                        ]
                      ]
                    ]),
                  /* [] */0
                ]
              ]
            ]),
          /* :: */[
            /* CProp */Block.__(1, [
                "implies",
                /* :: */[
                  /* CVar */Block.__(0, [23]),
                  /* :: */[
                    /* CVar */Block.__(0, [22]),
                    /* [] */0
                  ]
                ]
              ]),
            /* [] */0
          ]
        ]
      ]));

function run() {
  return tautp(apply_subst(subst, term));
}

function check(b) {
  if (b) {
    return /* Ok */0;
  } else {
    return /* Error */["Cannot prove"];
  }
}

var functions_000 = /* tuple */[
  "boyer",
  /* Unit */Block.__(0, [/* tuple */[
        run,
        check,
        /* Long */1
      ]])
];

var functions = /* :: */[
  functions_000,
  /* [] */0
];

Micro_bench_types.add(functions);

Fixture.run_n_times(20, (function () {
        return Micro_bench_run.run(/* None */0, Micro_bench_types.functions(/* () */0));
      }));

exports.print_term          = print_term;
exports.lemmas              = lemmas;
exports.get                 = get;
exports.add_lemma           = add_lemma;
exports.get_binding         = get_binding;
exports.apply_subst         = apply_subst;
exports.Unify               = Unify;
exports.unify               = unify;
exports.unify1              = unify1;
exports.unify1_lst          = unify1_lst;
exports.rewrite             = rewrite;
exports.rewrite_with_lemmas = rewrite_with_lemmas;
exports.cterm_to_term       = cterm_to_term;
exports.add                 = add;
exports.truep               = truep;
exports.falsep              = falsep;
exports.tautologyp          = tautologyp;
exports.tautp               = tautp;
exports.subst               = subst;
exports.term                = term;
exports.run                 = run;
exports.check               = check;
exports.functions           = functions;
/*  Not a pure module */
