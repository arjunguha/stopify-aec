// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block      = require("bs-platform/lib/js/block.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Printf     = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var solar_mass = 4 * 3.141592653589793 * 3.141592653589793;

function advance(bodies, dt) {
  var n = bodies.length - 1 | 0;
  for(var i = 0 ,i_finish = bodies.length - 1 | 0; i <= i_finish; ++i){
    var b = Caml_array.caml_array_get(bodies, i);
    for(var j = i + 1 | 0 ,j_finish = bodies.length - 1 | 0; j <= j_finish; ++j){
      var b$prime = Caml_array.caml_array_get(bodies, j);
      var dx = b[/* x */0] - b$prime[/* x */0];
      var dy = b[/* y */1] - b$prime[/* y */1];
      var dz = b[/* z */2] - b$prime[/* z */2];
      var dist2 = dx * dx + dy * dy + dz * dz;
      var mag = dt / (dist2 * Math.sqrt(dist2));
      b[3] -= (dx * b$prime[/* mass */6] * mag);
      b[4] -= (dy * b$prime[/* mass */6] * mag);
      b[5] -= (dz * b$prime[/* mass */6] * mag);
      b$prime[3] += (dx * b[/* mass */6] * mag);
      b$prime[4] += (dy * b[/* mass */6] * mag);
      b$prime[5] += (dz * b[/* mass */6] * mag);
    }
  }
  for(var i$1 = 0; i$1 <= n; ++i$1){
    var b$1 = Caml_array.caml_array_get(bodies, i$1);
    b$1[0] += (dt * b$1[/* vx */3]);
    b$1[1] += (dt * b$1[/* vy */4]);
    b$1[2] += (dt * b$1[/* vz */5]);
  }
  return /* () */0;
}

function energy(bodies) {
  var e = 0;
  for(var i = 0 ,i_finish = bodies.length - 1 | 0; i <= i_finish; ++i){
    var b = Caml_array.caml_array_get(bodies, i);
    e += (0.5 * b[/* mass */6] * (b[/* vx */3] * b[/* vx */3] + b[/* vy */4] * b[/* vy */4] + b[/* vz */5] * b[/* vz */5]));
    for(var j = i + 1 | 0 ,j_finish = bodies.length - 1 | 0; j <= j_finish; ++j){
      var b$prime = Caml_array.caml_array_get(bodies, j);
      var dx = b[/* x */0] - b$prime[/* x */0];
      var dy = b[/* y */1] - b$prime[/* y */1];
      var dz = b[/* z */2] - b$prime[/* z */2];
      var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);
      e -= (b[/* mass */6] * b$prime[/* mass */6] / distance);
    }
  }
  return e;
}

function offset_momentum(bodies) {
  var px = 0;
  var py = 0;
  var pz = 0;
  for(var i = 0 ,i_finish = bodies.length - 1 | 0; i <= i_finish; ++i){
    px += (Caml_array.caml_array_get(bodies, i)[/* vx */3] * Caml_array.caml_array_get(bodies, i)[/* mass */6]);
    py += (Caml_array.caml_array_get(bodies, i)[/* vy */4] * Caml_array.caml_array_get(bodies, i)[/* mass */6]);
    pz += (Caml_array.caml_array_get(bodies, i)[/* vz */5] * Caml_array.caml_array_get(bodies, i)[/* mass */6]);
  }
  Caml_array.caml_array_get(bodies, 0)[/* vx */3] = -px / solar_mass;
  Caml_array.caml_array_get(bodies, 0)[/* vy */4] = -py / solar_mass;
  Caml_array.caml_array_get(bodies, 0)[/* vz */5] = -pz / solar_mass;
  return /* () */0;
}

var jupiter = /* float array */[
  4.84143144246472090e+00,
  -1.16032004402742839e+00,
  -1.03622044471123109e-01,
  1.66007664274403694e-03 * 365.24,
  7.69901118419740425e-03 * 365.24,
  -6.90460016972063023e-05 * 365.24,
  9.54791938424326609e-04 * solar_mass
];

var saturn = /* float array */[
  8.34336671824457987e+00,
  4.12479856412430479e+00,
  -4.03523417114321381e-01,
  -2.76742510726862411e-03 * 365.24,
  4.99852801234917238e-03 * 365.24,
  2.30417297573763929e-05 * 365.24,
  2.85885980666130812e-04 * solar_mass
];

var uranus = /* float array */[
  1.28943695621391310e+01,
  -1.51111514016986312e+01,
  -2.23307578892655734e-01,
  2.96460137564761618e-03 * 365.24,
  2.37847173959480950e-03 * 365.24,
  -2.96589568540237556e-05 * 365.24,
  4.36624404335156298e-05 * solar_mass
];

var neptune = /* float array */[
  1.53796971148509165e+01,
  -2.59193146099879641e+01,
  1.79258772950371181e-01,
  2.68067772490389322e-03 * 365.24,
  1.62824170038242295e-03 * 365.24,
  -9.51592254519715870e-05 * 365.24,
  5.15138902046611451e-05 * solar_mass
];

var sun = /* float array */[
  0,
  0,
  0,
  0,
  0,
  0,
  solar_mass
];

var bodies = /* array */[
  sun,
  jupiter,
  saturn,
  uranus,
  neptune
];

offset_momentum(bodies);

Curry._1(Printf.printf(/* Format */[
          /* Float */Block.__(8, [
              /* Float_f */0,
              /* No_padding */0,
              /* Lit_precision */[9],
              /* Char_literal */Block.__(12, [
                  /* "\n" */10,
                  /* End_of_format */0
                ])
            ]),
          "%.9f\n"
        ]), energy(bodies));

for(var i = 1; i <= 50000000; ++i){
  advance(bodies, 0.01);
}

Curry._1(Printf.printf(/* Format */[
          /* Float */Block.__(8, [
              /* Float_f */0,
              /* No_padding */0,
              /* Lit_precision */[9],
              /* Char_literal */Block.__(12, [
                  /* "\n" */10,
                  /* End_of_format */0
                ])
            ]),
          "%.9f\n"
        ]), energy(bodies));

var pi = 3.141592653589793;

var days_per_year = 365.24;

exports.pi              = pi;
exports.solar_mass      = solar_mass;
exports.days_per_year   = days_per_year;
exports.advance         = advance;
exports.energy          = energy;
exports.offset_momentum = offset_momentum;
exports.jupiter         = jupiter;
exports.saturn          = saturn;
exports.uranus          = uranus;
exports.neptune         = neptune;
exports.sun             = sun;
exports.bodies          = bodies;
/*  Not a pure module */
