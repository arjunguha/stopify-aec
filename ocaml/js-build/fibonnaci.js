// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block             = require("bs-platform/lib/js/block.js");
var Fixture           = require("../fixture.js");
var Caml_array        = require("bs-platform/lib/js/caml_array.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var Micro_bench_types = require("../micro_bench_types.js");

function fib(n) {
  if (n < 2) {
    return 1;
  } else {
    return fib(n - 1 | 0) + fib(n - 2 | 0) | 0;
  }
}

var results = /* array */[
  1,
  1,
  2,
  3,
  5,
  8,
  13,
  21,
  34,
  55,
  89,
  144,
  233,
  377,
  610,
  987,
  1597,
  2584,
  4181,
  6765,
  10946,
  17711,
  28657,
  46368,
  75025,
  121393,
  196418,
  317811,
  514229,
  832040,
  1346269,
  2178309,
  3524578,
  5702887,
  9227465,
  14930352,
  24157817,
  39088169,
  63245986,
  102334155,
  165580141,
  267914296,
  433494437,
  701408733
];

function prepare(i) {
  return i;
}

var run = fib;

function check(i, n) {
  if (n === Caml_array.caml_array_get(results, i)) {
    return /* Ok */0;
  } else {
    return /* Error */["fib " + (Pervasives.string_of_int(i) + (" returned " + (Pervasives.string_of_int(n) + (" instead of " + Pervasives.string_of_int(Caml_array.caml_array_get(results, i))))))];
  }
}

var functions_000 = /* tuple */[
  "fib",
  /* Int */Block.__(1, [/* tuple */[
        run,
        prepare,
        check,
        /* :: */[
          /* tuple */[
            /* Range */Block.__(0, [
                0,
                28
              ]),
            /* Short */0
          ],
          /* :: */[
            /* tuple */[
              /* Range */Block.__(0, [
                  29,
                  40
                ]),
              /* Long */1
            ],
            /* :: */[
              /* tuple */[
                /* Range */Block.__(0, [
                    40,
                    results.length - 1 | 0
                  ]),
                /* Longer */2
              ],
              /* [] */0
            ]
          ]
        ]
      ]])
];

var functions = /* :: */[
  functions_000,
  /* [] */0
];

Micro_bench_types.add(functions);

var config = Micro_bench_run.Config[/* parse */1](/* () */0);

if (typeof config === "number") {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else if (config[0] !== 4103979) {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else {
  var conf = config[1];
  Fixture.run_n_times(1, (function () {
          var newrecord = conf.slice();
          return Micro_bench_run.run(/* Some */[/* Some */[/* `Run */[
                          4103979,
                          (newrecord[/* number_of_different_values */5] = 10, newrecord)
                        ]]], Micro_bench_types.functions(/* () */0));
        }));
}

exports.fib       = fib;
exports.results   = results;
exports.prepare   = prepare;
exports.run       = run;
exports.check     = check;
exports.functions = functions;
/*  Not a pure module */
