// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Sys         = require("bs-platform/lib/js/sys.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Printf      = require("bs-platform/lib/js/printf.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function fannkuch(n) {
  var perm1 = Caml_array.caml_make_vect(n, 0);
  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){
    Caml_array.caml_array_set(perm1, i, i);
  }
  var perm = Caml_array.caml_make_vect(n, 0);
  var count = Caml_array.caml_make_vect(n, 0);
  var flips = 0;
  var maxflips = 0;
  var checksum = 0;
  var nperm = 0;
  var r = n;
  while(r > 0) {
    for(var i$1 = 0 ,i_finish$1 = n - 1 | 0; i$1 <= i_finish$1; ++i$1){
      Caml_array.caml_array_set(perm, i$1, Caml_array.caml_array_get(perm1, i$1));
    }
    while(r !== 1) {
      Caml_array.caml_array_set(count, r - 1 | 0, r);
      r = r - 1 | 0;
    };
    flips = 0;
    var k = Caml_array.caml_array_get(perm, 0);
    while(k !== 0) {
      var t = 0;
      for(var i$2 = 0 ,i_finish$2 = k / 2 | 0; i$2 <= i_finish$2; ++i$2){
        t = Caml_array.caml_array_get(perm, i$2);
        Caml_array.caml_array_set(perm, i$2, Caml_array.caml_array_get(perm, k - i$2 | 0));
        Caml_array.caml_array_set(perm, k - i$2 | 0, t);
      }
      k = Caml_array.caml_array_get(perm, 0);
      flips = flips + 1 | 0;
    };
    maxflips = Pervasives.max(maxflips, flips);
    checksum = checksum + Caml_int32.imul(flips, 1 - ((nperm & 1) << 1) | 0) | 0;
    var go = /* true */1;
    var t$1 = 0;
    while(go) {
      if (r === n) {
        go = /* false */0;
        r = 0;
      } else {
        t$1 = Caml_array.caml_array_get(perm1, 0);
        for(var i$3 = 0 ,i_finish$3 = r - 1 | 0; i$3 <= i_finish$3; ++i$3){
          Caml_array.caml_array_set(perm1, i$3, Caml_array.caml_array_get(perm1, i$3 + 1 | 0));
        }
        Caml_array.caml_array_set(perm1, r, t$1);
        Caml_array.caml_array_set(count, r, Caml_array.caml_array_get(count, r) - 1 | 0);
        if (Caml_array.caml_array_get(count, r) > 0) {
          go = /* false */0;
        } else {
          r = r + 1 | 0;
        }
      }
    };
    nperm = nperm + 1 | 0;
  };
  return /* tuple */[
          maxflips,
          checksum
        ];
}

var n;

try {
  n = Caml_format.caml_int_of_string(Caml_array.caml_array_get(Sys.argv, 1));
}
catch (exn){
  n = 11;
}

var match = fannkuch(n);

Curry._3(Printf.printf(/* Format */[
          /* Int */Block.__(4, [
              /* Int_d */0,
              /* No_padding */0,
              /* No_precision */0,
              /* String_literal */Block.__(11, [
                  "\nPfannkuchen(",
                  /* Int */Block.__(4, [
                      /* Int_d */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* String_literal */Block.__(11, [
                          ") = ",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* Char_literal */Block.__(12, [
                                  /* "\n" */10,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ])
                ])
            ]),
          "%d\nPfannkuchen(%d) = %d\n"
        ]), match[1], n, match[0]);

exports.fannkuch = fannkuch;
/* n Not a pure module */
