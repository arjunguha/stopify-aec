#lang r5rs
(define (time x) x)

(define (run-bench name count ok? run)
  (let loop ((i 0) (result (list 'undefined)))
    (if (< i count)
      (loop (+ i 1) (run))
      result)))

(define (run-benchmark name count ok? run-maker . args)
  (newline)
  (let* ((run (apply run-maker args))
         (result (time (run-bench name count ok? run))))
    (if (not (ok? result))
      (begin
        (display "*** wrong result ***")
        (newline)
        (display "*** got: ")
        (write result)
        (newline))
      (begin
        (display "OK") 
        (newline)))))
(define boyer-iters    1)
(define browse-iters   1)
(define conform-iters  1)
(define cpstak-iters   1)
(define ctak-iters     1)
(define dderiv-iters   1)
(define deriv-iters    1)
(define destruc-iters  1)
(define diviter-iters  1)
(define divrec-iters   1)
(define earley-iters   1)
(define fft-iters      1)
(define fib-iters      1)
(define fibfp-iters    1)
(define maze-iters     1)
(define mazefun-iters  1)
(define mbrot-iters    1)
(define nucleic-iters  1)
(define peval-iters    1)
(define pnpoly-iters   1)
(define puzzle-iters   1)
(define ray-iters      1)
(define scheme-iters   1)
(define simplex-iters  1)
(define slatex-iters   1)
(define sum-iters      1)
(define sumfp-iters    1)
(define tak-iters      1)
(define takl-iters     1)
(define trav1-iters    1)
(define trav2-iters    1)
(define triangl-iters  1)

(define smlboyer-iters 1)
(define nboyer-iters   0) ; problem size, not iterations
(define dynamic-iters  1)
(define graphs-iters   1)
(define lattice-iters  1)
(define nbody-iters    1)
(define quicksort-iters 1)
(define perm9-iters    1)
(main)
