// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array           = require("bs-platform/lib/js/array.js");
var Block             = require("bs-platform/lib/js/block.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var Printf            = require("bs-platform/lib/js/printf.js");
var Random            = require("bs-platform/lib/js/random.js");
var Fixture           = require("../fixture.js");
var Caml_array        = require("bs-platform/lib/js/caml_array.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var Micro_bench_types = require("../micro_bench_types.js");

var empty = /* float array */[
  0,
  0
];

function update(t, v) {
  var x = v - t[/* correction */0];
  var ns = t[/* sum */1] + x;
  return /* float array */[
          ns - t[/* sum */1] - x,
          ns
        ];
}

function sum(t) {
  return t[/* sum */1];
}

var Kahan = /* module */[
  /* empty */empty,
  /* zero */empty,
  /* update */update,
  /* + */update,
  /* sum */sum
];

function sum_with_array_fold(a) {
  return $$Array.fold_left(update, empty, a)[/* sum */1];
}

function sum_baseline(a) {
  var c = 0;
  var s = 0;
  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
    var x = Caml_array.caml_array_get(a, i) - c;
    var ns = s + x;
    c = ns - s - x;
    s = ns;
  }
  return s;
}

var Kahan_sum = /* module */[
  /* Kahan */Kahan,
  /* sum_with_array_fold */sum_with_array_fold,
  /* sum_baseline */sum_baseline
];

function prepare(n) {
  var state = Random.State[/* make */0](/* int array */[n]);
  return $$Array.init(n, (function () {
                return Random.State[/* float */8](state, 1e10);
              }));
}

function check(n, r) {
  var data = prepare(n);
  var expected = sum_baseline(data);
  if (expected === r) {
    return /* Ok */0;
  } else {
    return /* Error */[Curry._2(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "got ",
                          /* Float */Block.__(8, [
                              /* Float_f */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  ", expected ",
                                  /* Float */Block.__(8, [
                                      /* Float_f */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */Block.__(11, [
                                          " (errors might be hidden by the printer rounding)",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "got %f, expected %f (errors might be hidden by the printer rounding)"
                    ]), r, expected)];
  }
}

var interval_range = /* :: */[
  /* tuple */[
    /* Range */Block.__(0, [
        0,
        100000
      ]),
    /* Short */0
  ],
  /* :: */[
    /* tuple */[
      /* Range */Block.__(0, [
          100000,
          1000000
        ]),
      /* Long */1
    ],
    /* :: */[
      /* tuple */[
        /* Range */Block.__(0, [
            10000000,
            100000000
          ]),
        /* Longer */2
      ],
      /* [] */0
    ]
  ]
];

var functions_000 = /* tuple */[
  "kahan_sum",
  /* Int_group */Block.__(3, [/* tuple */[
        /* :: */[
          /* tuple */[
            "baseline",
            sum_baseline
          ],
          /* :: */[
            /* tuple */[
              "array_fold",
              sum_with_array_fold
            ],
            /* [] */0
          ]
        ],
        prepare,
        check,
        interval_range
      ]])
];

var functions = /* :: */[
  functions_000,
  /* [] */0
];

Micro_bench_types.add(functions);

var config = Micro_bench_run.Config[/* parse */1](/* () */0);

if (typeof config === "number") {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else if (config[0] !== 4103979) {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else {
  var conf = config[1];
  Fixture.run_n_times(1, (function () {
          var newrecord = conf.slice();
          return Micro_bench_run.run(/* Some */[/* Some */[/* `Run */[
                          4103979,
                          (newrecord[/* number_of_different_values */5] = 5, newrecord)
                        ]]], Micro_bench_types.functions(/* () */0));
        }));
}

exports.Kahan_sum      = Kahan_sum;
exports.prepare        = prepare;
exports.check          = check;
exports.interval_range = interval_range;
exports.functions      = functions;
/*  Not a pure module */
