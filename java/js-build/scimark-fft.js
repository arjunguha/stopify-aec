/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */
/**
 * Computes FFT's of complex, double precision data where n is an integer power of 2.
 * This appears to be slower than the Radix2 method,
 * but the code is smaller and simpler, and it requires no extra storage.
 * <P>
 *
 * @author Bruce R. Miller bruce.miller@nist.gov,
 * @author Derived from GSL (Gnu Scientific Library),
 * @author GSL's FFT Code by Brian Gough bjg@vvv.lanl.gov
 * @class
 */
var Main = /** @class */ (function () {
    function Main() {
    }
    Main.num_flops = function (N) {
        var Nd = N;
        var logN = Main.log2(N);
        return (5.0 * Nd - 2) * logN + 2 * (Nd + 1);
    };
    /**
     * Compute Fast Fourier Transform of (complex) data, in place.
     * @param {Array} data
     */
    Main.transform = function (data) {
        Main.transform_internal(data, -1);
    };
    /**
     * Compute Inverse Fast Fourier Transform of (complex) data, in place.
     * @param {Array} data
     */
    Main.inverse = function (data) {
        Main.transform_internal(data, +1);
        var nd = data.length;
        var n = (nd / 2 | 0);
        var norm = 1 / n;
        for (var i = 0; i < nd; i++)
            data[i] *= norm;
    };
    /**
     * Accuracy check on FFT of data. Make a copy of data, Compute the FFT, then
     * the inverse and compare to the original.  Returns the rms difference.
     * @param {Array} data
     * @return {number}
     */
    Main.test = function (data) {
        var nd = data.length;
        var copy = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(nd);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(data, 0, copy, 0, nd);
        Main.transform(data);
        Main.inverse(data);
        var diff = 0.0;
        for (var i = 0; i < nd; i++) {
            var d = data[i] - copy[i];
            diff += d * d;
        }
        ;
        return Math.sqrt(diff / nd);
    };
    /**
     * Make a random array of n (complex) elements.
     * @param {number} n
     * @return {Array}
     */
    Main.makeRandom = function (n) {
        var nd = 2 * n;
        var data = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(nd);
        for (var i = 0; i < nd; i++)
            data[i] = Math.random();
        return data;
    };
    /**
     * Simple Test routine.
     * @param {Array} args
     */
    Main.main = function (args) {
        var n = 65536 * 32;
        console.info("n=" + n + " => RMS Error=" + Main.test(Main.makeRandom(n)));
    };
    Main.log2 = function (n) {
        var log = 0;
        for (var k = 1; k < n; k *= 2, log++)
            ;
        if (n !== (1 << log))
            throw Object.defineProperty(new Error("FFT: Data length is not a power of 2!: " + n), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.Error', 'java.lang.Object'] });
        return log;
    };
    Main.transform_internal = function (data, direction) {
        if (data.length === 0)
            return;
        var n = (data.length / 2 | 0);
        if (n === 1)
            return;
        var logn = Main.log2(n);
        Main.bitreverse(data);
        for (var bit = 0, dual = 1; bit < logn; bit++, dual *= 2) {
            var w_real = 1.0;
            var w_imag = 0.0;
            var theta = 2.0 * direction * Math.PI / (2.0 * dual);
            var s = Math.sin(theta);
            var t = Math.sin(theta / 2.0);
            var s2 = 2.0 * t * t;
            for (var b = 0; b < n; b += 2 * dual) {
                var i = 2 * b;
                var j = 2 * (b + dual);
                var wd_real = data[j];
                var wd_imag = data[j + 1];
                data[j] = data[i] - wd_real;
                data[j + 1] = data[i + 1] - wd_imag;
                data[i] += wd_real;
                data[i + 1] += wd_imag;
            }
            ;
            for (var a = 1; a < dual; a++) {
                {
                    var tmp_real = w_real - s * w_imag - s2 * w_real;
                    var tmp_imag = w_imag + s * w_real - s2 * w_imag;
                    w_real = tmp_real;
                    w_imag = tmp_imag;
                }
                ;
                for (var b = 0; b < n; b += 2 * dual) {
                    var i = 2 * (b + a);
                    var j = 2 * (b + a + dual);
                    var z1_real = data[j];
                    var z1_imag = data[j + 1];
                    var wd_real = w_real * z1_real - w_imag * z1_imag;
                    var wd_imag = w_real * z1_imag + w_imag * z1_real;
                    data[j] = data[i] - wd_real;
                    data[j + 1] = data[i + 1] - wd_imag;
                    data[i] += wd_real;
                    data[i + 1] += wd_imag;
                }
                ;
            }
            ;
        }
        ;
    };
    Main.bitreverse = function (data) {
        var n = (data.length / 2 | 0);
        var nm1 = n - 1;
        var i = 0;
        var j = 0;
        for (; i < nm1; i++) {
            var ii = i << 1;
            var jj = j << 1;
            var k = n >> 1;
            if (i < j) {
                var tmp_real = data[ii];
                var tmp_imag = data[ii + 1];
                data[ii] = data[jj];
                data[ii + 1] = data[jj + 1];
                data[jj] = tmp_real;
                data[jj + 1] = tmp_imag;
            }
            while ((k <= j)) {
                j -= k;
                k >>= 1;
            }
            ;
            j += k;
        }
        ;
    };
    return Main;
}());
Main["__class"] = "Main";
Main.main(null);
//# sourceMappingURL=data:application/json;base64,