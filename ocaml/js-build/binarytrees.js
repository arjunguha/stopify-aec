// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Sys         = require("bs-platform/lib/js/sys.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Printf      = require("bs-platform/lib/js/printf.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function make(d) {
  if (d) {
    var d$1 = d - 1 | 0;
    return /* Node */[
            make(d$1),
            make(d$1)
          ];
  } else {
    return /* Node */[
            /* Empty */0,
            /* Empty */0
          ];
  }
}

function check(param) {
  if (param) {
    return (1 + check(param[0]) | 0) + check(param[1]) | 0;
  } else {
    return 0;
  }
}

var n;

try {
  n = Caml_format.caml_int_of_string(Caml_array.caml_array_get(Sys.argv, 1));
}
catch (exn){
  n = 21;
}

var max_depth = Pervasives.max(6, n);

var stretch_depth = max_depth + 1 | 0;

var c = check(make(stretch_depth));

Curry._2(Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "stretch tree of depth ",
              /* Int */Block.__(4, [
                  /* Int_i */3,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* String_literal */Block.__(11, [
                      "\t check: ",
                      /* Int */Block.__(4, [
                          /* Int_i */3,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ])
            ]),
          "stretch tree of depth %i\t check: %i\n"
        ]), stretch_depth, c);

var long_lived_tree = make(max_depth);

function loop_depths(d) {
  for(var i = 0 ,i_finish = (((max_depth - d | 0) / 2 | 0) + 1 | 0) - 1 | 0; i <= i_finish; ++i){
    var d$1 = d + (i << 1) | 0;
    var niter = (1 << ((max_depth - d$1 | 0) + 4 | 0));
    var c = 0;
    for(var i$1 = 1; i$1 <= niter; ++i$1){
      c = c + check(make(d$1)) | 0;
    }
    Curry._3(Printf.printf(/* Format */[
              /* Int */Block.__(4, [
                  /* Int_i */3,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* String_literal */Block.__(11, [
                      "\t trees of depth ",
                      /* Int */Block.__(4, [
                          /* Int_i */3,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              "\t check: ",
                              /* Int */Block.__(4, [
                                  /* Int_i */3,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "\n" */10,
                                      /* End_of_format */0
                                    ])
                                ])
                            ])
                        ])
                    ])
                ]),
              "%i\t trees of depth %i\t check: %i\n"
            ]), niter, d$1, c);
  }
  return /* () */0;
}

Pervasives.flush(Pervasives.stdout);

loop_depths(4);

Curry._2(Printf.printf(/* Format */[
          /* String_literal */Block.__(11, [
              "long lived tree of depth ",
              /* Int */Block.__(4, [
                  /* Int_i */3,
                  /* No_padding */0,
                  /* No_precision */0,
                  /* String_literal */Block.__(11, [
                      "\t check: ",
                      /* Int */Block.__(4, [
                          /* Int_i */3,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* Char_literal */Block.__(12, [
                              /* "\n" */10,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ])
            ]),
          "long lived tree of depth %i\t check: %i\n"
        ]), max_depth, check(long_lived_tree));

var min_depth = 4;

exports.make            = make;
exports.check           = check;
exports.min_depth       = min_depth;
exports.max_depth       = max_depth;
exports.stretch_depth   = stretch_depth;
exports.long_lived_tree = long_lived_tree;
exports.loop_depths     = loop_depths;
/* n Not a pure module */
