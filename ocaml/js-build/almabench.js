// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array           = require("bs-platform/lib/js/array.js");
var Block             = require("bs-platform/lib/js/block.js");
var Js_exn            = require("bs-platform/lib/js/js_exn.js");
var Fixture           = require("../fixture.js");
var Caml_obj          = require("bs-platform/lib/js/caml_obj.js");
var Caml_array        = require("bs-platform/lib/js/caml_array.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Caml_exceptions   = require("bs-platform/lib/js/caml_exceptions.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var Micro_bench_types = require("../micro_bench_types.js");

var twopi = 2.0 * 3.14159265358979323846;

var a2r = 3.14159265358979323846 / 648000.0;

var r2h = 12.0 / 3.14159265358979323846;

var r2d = 180.0 / 3.14159265358979323846;

var amas = /* float array */[
  6023600.0,
  408523.5,
  328900.5,
  3098710.0,
  1047.355,
  3498.5,
  22869.0,
  19314.0
];

var a = /* array */[
  /* float array */[
    0.3870983098,
    0.0,
    0.0
  ],
  /* float array */[
    0.7233298200,
    0.0,
    0.0
  ],
  /* float array */[
    1.0000010178,
    0.0,
    0.0
  ],
  /* float array */[
    1.5236793419,
    3e-10,
    0.0
  ],
  /* float array */[
    5.2026032092,
    19132e-10,
    -39e-10
  ],
  /* float array */[
    9.5549091915,
    -0.0000213896,
    444e-10
  ],
  /* float array */[
    19.2184460618,
    -3716e-10,
    979e-10
  ],
  /* float array */[
    30.1103868694,
    -16635e-10,
    686e-10
  ]
];

var dlm = /* array */[
  /* float array */[
    252.25090552,
    5381016286.88982,
    -1.92789
  ],
  /* float array */[
    181.97980085,
    2106641364.33548,
    0.59381
  ],
  /* float array */[
    100.46645683,
    1295977422.83429,
    -2.04411
  ],
  /* float array */[
    355.43299958,
    689050774.93988,
    0.94264
  ],
  /* float array */[
    34.35151874,
    109256603.77991,
    -30.60378
  ],
  /* float array */[
    50.07744430,
    43996098.55732,
    75.61614
  ],
  /* float array */[
    314.05500511,
    15424811.93933,
    -1.75083
  ],
  /* float array */[
    304.34866548,
    7865503.20744,
    0.21103
  ]
];

var e = /* array */[
  /* float array */[
    0.2056317526,
    0.0002040653,
    -28349e-10
  ],
  /* float array */[
    0.0067719164,
    -0.0004776521,
    98127e-10
  ],
  /* float array */[
    0.0167086342,
    -0.0004203654,
    -0.0000126734
  ],
  /* float array */[
    0.0934006477,
    0.0009048438,
    -80641e-10
  ],
  /* float array */[
    0.0484979255,
    0.0016322542,
    -0.0000471366
  ],
  /* float array */[
    0.0555481426,
    -0.0034664062,
    -0.0000643639
  ],
  /* float array */[
    0.0463812221,
    -0.0002729293,
    0.0000078913
  ],
  /* float array */[
    0.0094557470,
    0.0000603263,
    0.0
  ]
];

var pi = /* array */[
  /* float array */[
    77.45611904,
    5719.11590,
    -4.83016
  ],
  /* float array */[
    131.56370300,
    175.48640,
    -498.48184
  ],
  /* float array */[
    102.93734808,
    11612.35290,
    53.27577
  ],
  /* float array */[
    336.06023395,
    15980.45908,
    -62.32800
  ],
  /* float array */[
    14.33120687,
    7758.75163,
    259.95938
  ],
  /* float array */[
    93.05723748,
    20395.49439,
    190.25952
  ],
  /* float array */[
    173.00529106,
    3215.56238,
    -34.09288
  ],
  /* float array */[
    48.12027554,
    1050.71912,
    27.39717
  ]
];

var dinc = /* array */[
  /* float array */[
    7.00498625,
    -214.25629,
    0.28977
  ],
  /* float array */[
    3.39466189,
    -30.84437,
    -11.67836
  ],
  /* float array */[
    0.0,
    469.97289,
    -3.35053
  ],
  /* float array */[
    1.84972648,
    -293.31722,
    -8.11830
  ],
  /* float array */[
    1.30326698,
    -71.55890,
    11.95297
  ],
  /* float array */[
    2.48887878,
    91.85195,
    -17.66225
  ],
  /* float array */[
    0.77319689,
    -60.72723,
    1.25759
  ],
  /* float array */[
    1.76995259,
    8.12333,
    0.08135
  ]
];

var omega = /* array */[
  /* float array */[
    48.33089304,
    -4515.21727,
    -31.79892
  ],
  /* float array */[
    76.67992019,
    -10008.48154,
    -51.32614
  ],
  /* float array */[
    174.87317577,
    -8679.27034,
    15.34191
  ],
  /* float array */[
    49.55809321,
    -10620.90088,
    -230.57416
  ],
  /* float array */[
    100.46440702,
    6362.03561,
    326.52178
  ],
  /* float array */[
    113.66550252,
    -9240.19942,
    -66.23743
  ],
  /* float array */[
    74.00595701,
    2669.15033,
    145.93964
  ],
  /* float array */[
    131.78405702,
    -221.94322,
    -0.78728
  ]
];

var kp = /* array */[
  /* float array */[
    69613.0,
    75645.0,
    88306.0,
    59899.0,
    15746.0,
    71087.0,
    142173.0,
    3086.0,
    0.0
  ],
  /* float array */[
    21863.0,
    32794.0,
    26934.0,
    10931.0,
    26250.0,
    43725.0,
    53867.0,
    28939.0,
    0.0
  ],
  /* float array */[
    16002.0,
    21863.0,
    32004.0,
    10931.0,
    14529.0,
    16368.0,
    15318.0,
    32794.0,
    0.0
  ],
  /* float array */[
    6345.0,
    7818.0,
    15636.0,
    7077.0,
    8184.0,
    14163.0,
    1107.0,
    4872.0,
    0.0
  ],
  /* float array */[
    1760.0,
    1454.0,
    1167.0,
    880.0,
    287.0,
    2640.0,
    19.0,
    2047.0,
    1454.0
  ],
  /* float array */[
    574.0,
    0.0,
    880.0,
    287.0,
    19.0,
    1760.0,
    1167.0,
    306.0,
    574.0
  ],
  /* float array */[
    204.0,
    0.0,
    177.0,
    1265.0,
    4.0,
    385.0,
    200.0,
    208.0,
    204.0
  ],
  /* float array */[
    0.0,
    102.0,
    106.0,
    4.0,
    98.0,
    1367.0,
    487.0,
    204.0,
    0.0
  ]
];

var ca = /* array */[
  /* float array */[
    4.0,
    -13.0,
    11.0,
    -9.0,
    -9.0,
    -3.0,
    -1.0,
    4.0,
    0.0
  ],
  /* float array */[
    -156.0,
    59.0,
    -42.0,
    6.0,
    19.0,
    -20.0,
    -10.0,
    -12.0,
    0.0
  ],
  /* float array */[
    64.0,
    -152.0,
    62.0,
    -8.0,
    32.0,
    -41.0,
    19.0,
    -11.0,
    0.0
  ],
  /* float array */[
    124.0,
    621.0,
    -145.0,
    208.0,
    54.0,
    -57.0,
    30.0,
    15.0,
    0.0
  ],
  /* float array */[
    -23437.0,
    -2634.0,
    6601.0,
    6259.0,
    -1507.0,
    -1821.0,
    2620.0,
    -2115.0,
    -1489.0
  ],
  /* float array */[
    62911.0,
    -119919.0,
    79336.0,
    17814.0,
    -24241.0,
    12068.0,
    8306.0,
    -4893.0,
    8902.0
  ],
  /* float array */[
    389061.0,
    -262125.0,
    -44088.0,
    8387.0,
    -22976.0,
    -2093.0,
    -615.0,
    -9720.0,
    6633.0
  ],
  /* float array */[
    -412235.0,
    -157046.0,
    -31430.0,
    37817.0,
    -9740.0,
    -13.0,
    -7449.0,
    9644.0,
    0.0
  ]
];

var sa = /* array */[
  /* float array */[
    -29.0,
    -1.0,
    9.0,
    6.0,
    -6.0,
    5.0,
    4.0,
    0.0,
    0.0
  ],
  /* float array */[
    -48.0,
    -125.0,
    -26.0,
    -37.0,
    18.0,
    -13.0,
    -20.0,
    -2.0,
    0.0
  ],
  /* float array */[
    -150.0,
    -46.0,
    68.0,
    54.0,
    14.0,
    24.0,
    -28.0,
    22.0,
    0.0
  ],
  /* float array */[
    -621.0,
    532.0,
    -694.0,
    -20.0,
    192.0,
    -94.0,
    71.0,
    -73.0,
    0.0
  ],
  /* float array */[
    -14614.0,
    -19828.0,
    -5869.0,
    1881.0,
    -4372.0,
    -2255.0,
    782.0,
    930.0,
    913.0
  ],
  /* float array */[
    139737.0,
    0.0,
    24667.0,
    51123.0,
    -5102.0,
    7429.0,
    -4095.0,
    -1976.0,
    -9566.0
  ],
  /* float array */[
    -138081.0,
    0.0,
    37205.0,
    -49039.0,
    -41901.0,
    -33872.0,
    -27037.0,
    -12474.0,
    18797.0
  ],
  /* float array */[
    0.0,
    28492.0,
    133236.0,
    69654.0,
    52322.0,
    -49577.0,
    -26430.0,
    -3593.0,
    0.0
  ]
];

var kq = /* array */[
  /* float array */[
    3086.0,
    15746.0,
    69613.0,
    59899.0,
    75645.0,
    88306.0,
    12661.0,
    2658.0,
    0.0,
    0.0
  ],
  /* float array */[
    21863.0,
    32794.0,
    10931.0,
    73.0,
    4387.0,
    26934.0,
    1473.0,
    2157.0,
    0.0,
    0.0
  ],
  /* float array */[
    10.0,
    16002.0,
    21863.0,
    10931.0,
    1473.0,
    32004.0,
    4387.0,
    73.0,
    0.0,
    0.0
  ],
  /* float array */[
    10.0,
    6345.0,
    7818.0,
    1107.0,
    15636.0,
    7077.0,
    8184.0,
    532.0,
    10.0,
    0.0
  ],
  /* float array */[
    19.0,
    1760.0,
    1454.0,
    287.0,
    1167.0,
    880.0,
    574.0,
    2640.0,
    19.0,
    1454.0
  ],
  /* float array */[
    19.0,
    574.0,
    287.0,
    306.0,
    1760.0,
    12.0,
    31.0,
    38.0,
    19.0,
    574.0
  ],
  /* float array */[
    4.0,
    204.0,
    177.0,
    8.0,
    31.0,
    200.0,
    1265.0,
    102.0,
    4.0,
    204.0
  ],
  /* float array */[
    4.0,
    102.0,
    106.0,
    8.0,
    98.0,
    1367.0,
    487.0,
    204.0,
    4.0,
    102.0
  ]
];

var cl = /* array */[
  /* float array */[
    21.0,
    -95.0,
    -157.0,
    41.0,
    -5.0,
    42.0,
    23.0,
    30.0,
    0.0,
    0.0
  ],
  /* float array */[
    -160.0,
    -313.0,
    -235.0,
    60.0,
    -74.0,
    -76.0,
    -27.0,
    34.0,
    0.0,
    0.0
  ],
  /* float array */[
    -325.0,
    -322.0,
    -79.0,
    232.0,
    -52.0,
    97.0,
    55.0,
    -41.0,
    0.0,
    0.0
  ],
  /* float array */[
    2268.0,
    -979.0,
    802.0,
    602.0,
    -668.0,
    -33.0,
    345.0,
    201.0,
    -55.0,
    0.0
  ],
  /* float array */[
    7610.0,
    -4997.0,
    -7689.0,
    -5841.0,
    -2617.0,
    1115.0,
    -748.0,
    -607.0,
    6074.0,
    354.0
  ],
  /* float array */[
    -18549.0,
    30125.0,
    20012.0,
    -730.0,
    824.0,
    23.0,
    1289.0,
    -352.0,
    -14767.0,
    -2062.0
  ],
  /* float array */[
    -135245.0,
    -14594.0,
    4197.0,
    -4030.0,
    -5630.0,
    -2898.0,
    2540.0,
    -306.0,
    2939.0,
    1986.0
  ],
  /* float array */[
    89948.0,
    2103.0,
    8963.0,
    2695.0,
    3682.0,
    1648.0,
    866.0,
    -154.0,
    -1963.0,
    -283.0
  ]
];

var sl = /* array */[
  /* float array */[
    -342.0,
    136.0,
    -23.0,
    62.0,
    66.0,
    -52.0,
    -33.0,
    17.0,
    0.0,
    0.0
  ],
  /* float array */[
    524.0,
    -149.0,
    -35.0,
    117.0,
    151.0,
    122.0,
    -71.0,
    -62.0,
    0.0,
    0.0
  ],
  /* float array */[
    -105.0,
    -137.0,
    258.0,
    35.0,
    -116.0,
    -88.0,
    -112.0,
    -80.0,
    0.0,
    0.0
  ],
  /* float array */[
    854.0,
    -205.0,
    -936.0,
    -240.0,
    140.0,
    -341.0,
    -97.0,
    -232.0,
    536.0,
    0.0
  ],
  /* float array */[
    -56980.0,
    8016.0,
    1012.0,
    1448.0,
    -3024.0,
    -3710.0,
    318.0,
    503.0,
    3767.0,
    577.0
  ],
  /* float array */[
    138606.0,
    -13478.0,
    -4964.0,
    1441.0,
    -1319.0,
    -1482.0,
    427.0,
    1236.0,
    -9167.0,
    -1918.0
  ],
  /* float array */[
    71234.0,
    -41116.0,
    5334.0,
    -4935.0,
    -1848.0,
    66.0,
    434.0,
    -1748.0,
    3780.0,
    -701.0
  ],
  /* float array */[
    -47645.0,
    11647.0,
    2166.0,
    3194.0,
    679.0,
    0.0,
    -244.0,
    -419.0,
    -2531.0,
    48.0
  ]
];

function anpm(a) {
  var w = a % twopi;
  if (Math.abs(w) >= 3.14159265358979323846) {
    if (a < 0.0) {
      return w + twopi;
    } else {
      return w - twopi;
    }
  } else {
    return w;
  }
}

function planetpv(epoch, np, pv) {
  var t = (Caml_array.caml_array_get(epoch, 0) - 2451545.0 + Caml_array.caml_array_get(epoch, 1)) / 365250.0;
  var da = Caml_array.caml_array_get(Caml_array.caml_array_get(a, np), 0) + (Caml_array.caml_array_get(Caml_array.caml_array_get(a, np), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(a, np), 2) * t) * t;
  var dl = (3600.0 * Caml_array.caml_array_get(Caml_array.caml_array_get(dlm, np), 0) + (Caml_array.caml_array_get(Caml_array.caml_array_get(dlm, np), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(dlm, np), 2) * t) * t) * a2r;
  var de = Caml_array.caml_array_get(Caml_array.caml_array_get(e, np), 0) + (Caml_array.caml_array_get(Caml_array.caml_array_get(e, np), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(e, np), 2) * t) * t;
  var dp = anpm((3600.0 * Caml_array.caml_array_get(Caml_array.caml_array_get(pi, np), 0) + (Caml_array.caml_array_get(Caml_array.caml_array_get(pi, np), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(pi, np), 2) * t) * t) * a2r);
  var di = (3600.0 * Caml_array.caml_array_get(Caml_array.caml_array_get(dinc, np), 0) + (Caml_array.caml_array_get(Caml_array.caml_array_get(dinc, np), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(dinc, np), 2) * t) * t) * a2r;
  var doh = anpm((3600.0 * Caml_array.caml_array_get(Caml_array.caml_array_get(omega, np), 0) + (Caml_array.caml_array_get(Caml_array.caml_array_get(omega, np), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(omega, np), 2) * t) * t) * a2r);
  var dmu = 0.35953620 * t;
  var kp$1 = Caml_array.caml_array_get(kp, np);
  var kq$1 = Caml_array.caml_array_get(kq, np);
  var ca$1 = Caml_array.caml_array_get(ca, np);
  var sa$1 = Caml_array.caml_array_get(sa, np);
  var cl$1 = Caml_array.caml_array_get(cl, np);
  var sl$1 = Caml_array.caml_array_get(sl, np);
  for(var k = 0; k <= 7; ++k){
    var arga = Caml_array.caml_array_get(kp$1, k) * dmu;
    var argl = Caml_array.caml_array_get(kq$1, k) * dmu;
    da += ((Caml_array.caml_array_get(ca$1, k) * Math.cos(arga) + Caml_array.caml_array_get(sa$1, k) * Math.sin(arga)) * 0.0000001);
    dl += ((Caml_array.caml_array_get(cl$1, k) * Math.cos(argl) + Caml_array.caml_array_get(sl$1, k) * Math.sin(argl)) * 0.0000001);
  }
  var arga$1 = Caml_array.caml_array_get(kp$1, 8) * dmu;
  da += (t * (Caml_array.caml_array_get(ca$1, 8) * Math.cos(arga$1) + Caml_array.caml_array_get(sa$1, 8) * Math.sin(arga$1)) * 0.0000001);
  for(var k$1 = 8; k$1 <= 9; ++k$1){
    var argl$1 = Caml_array.caml_array_get(kq$1, k$1) * dmu;
    dl += (t * (Caml_array.caml_array_get(cl$1, k$1) * Math.cos(argl$1) + Caml_array.caml_array_get(sl$1, k$1) * Math.sin(argl$1)) * 0.0000001);
  }
  dl = dl % twopi;
  var am = dl - dp;
  var ae = am + de * Math.sin(am);
  var k$2 = 0;
  var dae = (am - ae + de * Math.sin(ae)) / (1.0 - de * Math.cos(ae));
  ae += dae;
  k$2 = k$2 + 1 | 0;
  while(k$2 < 10 || Math.abs(dae) >= 1e-12) {
    dae = (am - ae + de * Math.sin(ae)) / (1.0 - de * Math.cos(ae));
    ae += dae;
    k$2 = k$2 + 1 | 0;
  };
  var ae2 = ae / 2.0;
  var at = 2.0 * Math.atan2(Math.sqrt((1.0 + de) / (1.0 - de)) * Math.sin(ae2), Math.cos(ae2));
  var r = da * (1.0 - de * Math.cos(ae));
  var v = 0.01720209895 * Math.sqrt((1.0 + 1.0 / Caml_array.caml_array_get(amas, np)) / (da * da * da));
  var si2 = Math.sin(di / 2.0);
  var xq = si2 * Math.cos(doh);
  var xp = si2 * Math.sin(doh);
  var tl = at + dp;
  var xsw = Math.sin(tl);
  var xcw = Math.cos(tl);
  var xm2 = 2.0 * (xp * xcw - xq * xsw);
  var xf = da / Math.sqrt(1.0 - de * de);
  var ci2 = Math.cos(di / 2.0);
  var xms = (de * Math.sin(dp) + xsw) * xf;
  var xmc = (de * Math.cos(dp) + xcw) * xf;
  var xpxq2 = 2.0 * xp * xq;
  var x = r * (xcw - xm2 * xp);
  var y = r * (xsw + xm2 * xq);
  var z = r * (-xm2 * ci2);
  Caml_array.caml_array_set(Caml_array.caml_array_get(pv, 0), 0, x);
  Caml_array.caml_array_set(Caml_array.caml_array_get(pv, 0), 1, y * 0.9174820620691818 - z * 0.3977771559319137);
  Caml_array.caml_array_set(Caml_array.caml_array_get(pv, 0), 2, y * 0.3977771559319137 + z * 0.9174820620691818);
  var x$1 = v * ((-1.0 + 2.0 * xp * xp) * xms + xpxq2 * xmc);
  var y$1 = v * ((1.0 - 2.0 * xq * xq) * xmc - xpxq2 * xms);
  var z$1 = v * (2.0 * ci2 * (xp * xms + xq * xmc));
  Caml_array.caml_array_set(Caml_array.caml_array_get(pv, 1), 0, x$1);
  Caml_array.caml_array_set(Caml_array.caml_array_get(pv, 1), 1, y$1 * 0.9174820620691818 - z$1 * 0.3977771559319137);
  return Caml_array.caml_array_set(Caml_array.caml_array_get(pv, 1), 2, y$1 * 0.3977771559319137 + z$1 * 0.9174820620691818);
}

function radecdist(state, rdd) {
  Caml_array.caml_array_set(rdd, 2, Math.sqrt(Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 0) * Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 0) + Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 1) * Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 1) + Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 2) * Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 2)));
  Caml_array.caml_array_set(rdd, 0, Math.atan2(Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 1), Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 0)) * r2h);
  if (Caml_array.caml_array_get(rdd, 0) < 0.0) {
    Caml_array.caml_array_set(rdd, 0, Caml_array.caml_array_get(rdd, 0) + 24.0);
  }
  return Caml_array.caml_array_set(rdd, 1, Math.asin(Caml_array.caml_array_get(Caml_array.caml_array_get(state, 0), 2) / Caml_array.caml_array_get(rdd, 2)) * r2d);
}

function run(i) {
  var jd = /* float array */[
    0.0,
    0.0
  ];
  var pv = /* array */[
    /* float array */[
      0.0,
      0.0,
      0.0
    ],
    /* float array */[
      0.0,
      0.0,
      0.0
    ]
  ];
  var position = /* float array */[
    0.0,
    0.0,
    0.0
  ];
  return $$Array.init(i, (function (i) {
                Caml_array.caml_array_set(jd, 0, 2451545.0 + (i + 1 | 0));
                Caml_array.caml_array_set(jd, 1, 0.0);
                return $$Array.init(8, (function (p) {
                              planetpv(jd, p, pv);
                              radecdist(pv, position);
                              return /* tuple */[
                                      Caml_array.caml_array_get(position, 0),
                                      Caml_array.caml_array_get(position, 1)
                                    ];
                            }));
              }));
}

var result_1 = Caml_obj.caml_obj_dup(/* array */[
      /* tuple */[
        17.00,
        -26.06
      ],
      /* tuple */[
        12.34,
        1.29
      ],
      /* tuple */[
        6.83,
        22.95
      ],
      /* tuple */[
        0.04,
        -1.26
      ],
      /* tuple */[
        2.30,
        12.54
      ],
      /* tuple */[
        2.93,
        14.35
      ],
      /* tuple */[
        21.27,
        -16.57
      ],
      /* tuple */[
        20.41,
        -19.04
      ]
    ]);

var Err = Caml_exceptions.create("Almabench.Err");

function check_1(_, result) {
  var result$1 = Caml_array.caml_array_get(result, 0);
  try {
    $$Array.iteri((function (i, param) {
            var b = param[1];
            var a = param[0];
            var match = Caml_array.caml_array_get(result_1, i);
            if (Math.abs(match[0] - a) <= 0.01 && Math.abs(match[1] - b) <= 0.01) {
              return 0;
            } else {
              throw [
                    Err,
                    /* tuple */[
                      i,
                      a,
                      b
                    ]
                  ];
            }
          }), result$1);
    return /* Ok */0;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Err) {
      var match = exn[1];
      var i = match[0];
      var match$1 = Caml_array.caml_array_get(result_1, i);
      var s = Pervasives.string_of_int(i) + (": result " + (Pervasives.string_of_float(match[1]) + (" " + (Pervasives.string_of_float(match[2]) + (" expected " + (Pervasives.string_of_float(match$1[0]) + (" " + Pervasives.string_of_float(match$1[1]))))))));
      return /* Error */[s];
    } else {
      throw exn;
    }
  }
}

var functions_000 = /* tuple */[
  "bench",
  /* Int */Block.__(1, [/* tuple */[
        run,
        (function (i) {
            return i;
          }),
        check_1,
        /* :: */[
          /* tuple */[
            /* Range */Block.__(0, [
                20,
                100
              ]),
            /* Short */0
          ],
          /* [] */0
        ]
      ]])
];

var functions = /* :: */[
  functions_000,
  /* [] */0
];

Micro_bench_types.add(functions);

var config = Micro_bench_run.Config[/* parse */1](/* () */0);

if (typeof config === "number") {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else if (config[0] !== 4103979) {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else {
  var conf = config[1];
  Fixture.run_n_times(20, (function () {
          var newrecord = conf.slice();
          return Micro_bench_run.run(/* Some */[/* Some */[/* `Run */[
                          4103979,
                          (newrecord[/* number_of_different_values */5] = 81, newrecord)
                        ]]], Micro_bench_types.functions(/* () */0));
        }));
}

var pic = 3.14159265358979323846;

var j2000 = 2451545.0;

var jcentury = 36525.0;

var jmillenia = 365250.0;

var gaussk = 0.01720209895;

var sineps = 0.3977771559319137;

var coseps = 0.9174820620691818;

exports.pic       = pic;
exports.j2000     = j2000;
exports.jcentury  = jcentury;
exports.jmillenia = jmillenia;
exports.twopi     = twopi;
exports.a2r       = a2r;
exports.r2h       = r2h;
exports.r2d       = r2d;
exports.gaussk    = gaussk;
exports.sineps    = sineps;
exports.coseps    = coseps;
exports.amas      = amas;
exports.a         = a;
exports.dlm       = dlm;
exports.e         = e;
exports.pi        = pi;
exports.dinc      = dinc;
exports.omega     = omega;
exports.kp        = kp;
exports.ca        = ca;
exports.sa        = sa;
exports.kq        = kq;
exports.cl        = cl;
exports.sl        = sl;
exports.anpm      = anpm;
exports.planetpv  = planetpv;
exports.radecdist = radecdist;
exports.run       = run;
exports.result_1  = result_1;
exports.Err       = Err;
exports.check_1   = check_1;
exports.functions = functions;
/*  Not a pure module */
