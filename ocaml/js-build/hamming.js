// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var Sys               = require("bs-platform/lib/js/sys.js");
var Block             = require("bs-platform/lib/js/block.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var Buffer            = require("bs-platform/lib/js/buffer.js");
var Format            = require("bs-platform/lib/js/format.js");
var Fixture           = require("../fixture.js");
var Caml_obj          = require("bs-platform/lib/js/caml_obj.js");
var Caml_array        = require("bs-platform/lib/js/caml_array.js");
var Caml_int64        = require("bs-platform/lib/js/caml_int64.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Caml_format       = require("bs-platform/lib/js/caml_format.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var CamlinternalLazy  = require("bs-platform/lib/js/camlinternalLazy.js");
var Micro_bench_types = require("../micro_bench_types.js");

var result = "15441834907098675000000\n15449523925781250000000\n15461882265600000000000\n15479341056000000000000\n15496819560000000000000\n15514317799859619140625\n15544259980364064227328\n15552000000000000000000\n15561811787592868865280\n15564440312192434176000\n15569560546875000000000\n15582014906050805760000\n15599609344268697600000\n15617223649253376000000\n15625000000000000000000\n15634857843437408437500\n15642642974853515625000\n15655155793920000000000\n15672832819200000000000\n15690529804500000000000\n15728640000000000000000\n15746400000000000000000\n15756334434937779726096\n15758995816094839603200\n15764180053710937500000\n15776790092376440832000\n15794604461072056320000\n15812438944869043200000\n15820312500000000000000\n15832967439974400000000\n15850845241344000000000\n15868743229440000000000\n15886661427056250000000\n15925248000000000000000\n15937986879685052596224\n15943230000000000000000\n15955983263796025098240\n15961232304382324218750\n15973999968531146342400\n15992037016835457024000\n16000000000000000000000\n16010094431679906240000\n16018066406250000000000\n16030879532974080000000\n16048980806860800000000\n16067102519808000000000\n16085244694894453125000\n16093254089355468750000\n16106127360000000000000\n16124313600000000000000\n16142520375000000000000\n16155433054593475411968\n16173674968137785671680\n16191937479545900236800\n16200000000000000000000\n16210220612075905068000\n16212958658533785600000\n16218292236328125000000\n16231265527136256000000\n16249593066946560000000\n16267941301305600000000\n16294419765472412109375\n16307453952000000000000\n16325867520000000000000\n16344301879687500000000\n16375845905239507992576\n16384000000000000000000\n16394336698040223989760\n16402500000000000000000\n16412848369726853881350\n16415620641765457920000\n16421020889282226562500\n16434156346225459200000\n16452712980283392000000\n16471290567571920000000\n16479492187500000000000\n16492674416640000000000\n16511297126400000000000\n16529940864000000000000\n16548605653183593750000\n16588800000000000000000\n16599265906765726789632\n16602069666338596454400\n16607531250000000000000\n16620815899787526144000\n16639583300553277440000\n16658371892536934400000\n16677181699666569000000\n16685485839843750000000\n16698832846848000000000\n16717688340480000000000\n16736565124800000000000\n16755463223848388671875\n16763806343078613281250\n16777216000000000000000\n16796160000000000000000\n16809595537167828910080\n16815125390625000000000\n16828576098534870220800\n16847578091810193408000\n\n";

var Hamming_result = /* module */[/* result */result];

var n0 = /* int64 */[
  /* hi */0,
  /* lo */0
];

var n1 = /* int64 */[
  /* hi */0,
  /* lo */1
];

var n2 = /* int64 */[
  /* hi */0,
  /* lo */2
];

var n3 = /* int64 */[
  /* hi */0,
  /* lo */3
];

var n5 = /* int64 */[
  /* hi */0,
  /* lo */5
];

var $percent = Caml_int64.mod_;

var $star = Caml_int64.mul;

var $slash = Caml_int64.div;

var $plus = Caml_int64.add;

var digit = Caml_format.caml_int64_of_string("1000000000000000000");

function mul(n, param) {
  var pl = param[0];
  return /* tuple */[
          Caml_int64.mod_(Caml_int64.mul(n, pl), digit),
          Caml_int64.add(Caml_int64.mul(n, param[1]), Caml_int64.div(Caml_int64.mul(n, pl), digit))
        ];
}

function cmp(param, param$1) {
  var ph = param$1[1];
  var nh = param[1];
  if (Caml_obj.caml_lessthan(nh, ph)) {
    return -1;
  } else if (Caml_obj.caml_greaterthan(nh, ph)) {
    return 1;
  } else {
    var pl = param$1[0];
    var nl = param[0];
    if (Caml_obj.caml_lessthan(nl, pl)) {
      return -1;
    } else if (Caml_obj.caml_greaterthan(nl, pl)) {
      return 1;
    } else {
      return 0;
    }
  }
}

function x2(p) {
  return mul(n2, p);
}

function x3(p) {
  return mul(n3, p);
}

function x5(p) {
  return mul(n5, p);
}

var nn1 = /* tuple */[
  n1,
  n0
];

function pr(ppf, param) {
  var nh = param[1];
  var nl = param[0];
  if (Caml_int64.compare(nh, n0)) {
    return Curry._2(Format.fprintf(ppf, /* Format */[
                    /* Int64 */Block.__(7, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Int64 */Block.__(7, [
                            /* Int_d */0,
                            /* Lit_padding */Block.__(0, [
                                /* Zeros */2,
                                18
                              ]),
                            /* No_precision */0,
                            /* Formatting_lit */Block.__(17, [
                                /* Flush_newline */4,
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%Ld%018Ld@."
                  ]), nh, nl);
  } else {
    return Curry._1(Format.fprintf(ppf, /* Format */[
                    /* Int64 */Block.__(7, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* Formatting_lit */Block.__(17, [
                            /* Flush_newline */4,
                            /* End_of_format */0
                          ])
                      ]),
                    "%Ld@."
                  ]), nl);
  }
}

function map(f, l) {
  return Block.__(246, [(function () {
                var tag = l.tag | 0;
                var match = tag === 250 ? l[0] : (
                    tag === 246 ? CamlinternalLazy.force_lazy_block(l) : l
                  );
                return /* Cons */[
                        Curry._1(f, match[0]),
                        map(f, match[1])
                      ];
              })]);
}

function merge(cmp, l1, l2) {
  return Block.__(246, [(function () {
                var tag = l1.tag | 0;
                var match = tag === 250 ? l1[0] : (
                    tag === 246 ? CamlinternalLazy.force_lazy_block(l1) : l1
                  );
                var tag$1 = l2.tag | 0;
                var match$1 = tag$1 === 250 ? l2[0] : (
                    tag$1 === 246 ? CamlinternalLazy.force_lazy_block(l2) : l2
                  );
                var ll2 = match$1[1];
                var x2 = match$1[0];
                var ll1 = match[1];
                var x1 = match[0];
                var c = Curry._2(cmp, x1, x2);
                if (c) {
                  if (c < 0) {
                    return /* Cons */[
                            x1,
                            merge(cmp, ll1, l2)
                          ];
                  } else {
                    return /* Cons */[
                            x2,
                            merge(cmp, l1, ll2)
                          ];
                  }
                } else {
                  return /* Cons */[
                          x1,
                          merge(cmp, ll1, ll2)
                        ];
                }
              })]);
}

function skip(_l, _n) {
  while(true) {
    var n = _n;
    var l = _l;
    if (n) {
      var tag = l.tag | 0;
      var match = tag === 250 ? l[0] : (
          tag === 246 ? CamlinternalLazy.force_lazy_block(l) : l
        );
      _n = n - 1 | 0;
      _l = match[1];
      continue ;
      
    } else {
      return l;
    }
  };
}

function iter(f, _l, _n) {
  while(true) {
    var n = _n;
    var l = _l;
    if (n) {
      var tag = l.tag | 0;
      var match = tag === 250 ? l[0] : (
          tag === 246 ? CamlinternalLazy.force_lazy_block(l) : l
        );
      Curry._1(f, match[0]);
      _n = n - 1 | 0;
      _l = match[1];
      continue ;
      
    } else {
      return /* () */0;
    }
  };
}

function make_hamming() {
  var hamming = [];
  var ham2 = [];
  var ham3 = [];
  var ham5 = [];
  Caml_obj.caml_update_dummy(hamming, Block.__(246, [(function () {
              return /* Cons */[
                      nn1,
                      merge(cmp, ham2, merge(cmp, ham3, ham5))
                    ];
            })]));
  Caml_obj.caml_update_dummy(ham2, Block.__(246, [(function () {
              var lzarg = map(x2, hamming);
              var tag = lzarg.tag | 0;
              if (tag === 250) {
                return lzarg[0];
              } else if (tag === 246) {
                return CamlinternalLazy.force_lazy_block(lzarg);
              } else {
                return lzarg;
              }
            })]));
  Caml_obj.caml_update_dummy(ham3, Block.__(246, [(function () {
              var lzarg = map(x3, hamming);
              var tag = lzarg.tag | 0;
              if (tag === 250) {
                return lzarg[0];
              } else if (tag === 246) {
                return CamlinternalLazy.force_lazy_block(lzarg);
              } else {
                return lzarg;
              }
            })]));
  Caml_obj.caml_update_dummy(ham5, Block.__(246, [(function () {
              var lzarg = map(x5, hamming);
              var tag = lzarg.tag | 0;
              if (tag === 250) {
                return lzarg[0];
              } else if (tag === 246) {
                return CamlinternalLazy.force_lazy_block(lzarg);
              } else {
                return lzarg;
              }
            })]));
  return hamming;
}

function run(i) {
  var h = make_hamming(/* () */0);
  skip(h, i);
  return skip(h, i);
}

function check_i(_, _$1) {
  return /* Ok */0;
}

function check_string(l) {
  var b = Buffer.create(1000);
  var ppf = Format.formatter_of_buffer(b);
  iter((function (param) {
          return pr(ppf, param);
        }), l, 100);
  Format.fprintf(ppf, /* Format */[
        /* Formatting_lit */Block.__(17, [
            /* Flush_newline */4,
            /* End_of_format */0
          ]),
        "@."
      ]);
  return Buffer.contents(b);
}

function check(l) {
  var s = check_string(l);
  if (s === result) {
    return /* Ok */0;
  } else {
    return /* Error */[s];
  }
}

function prepare(i) {
  return i;
}

var range = /* :: */[
  /* tuple */[
    /* Range */Block.__(0, [
        10,
        10000
      ]),
    /* Short */0
  ],
  /* [] */0
];

var functions_000 = /* tuple */[
  "hamming var",
  /* Int */Block.__(1, [/* tuple */[
        run,
        prepare,
        check_i,
        range
      ]])
];

var functions_001 = /* :: */[
  /* tuple */[
    "hamming_test",
    /* Unit */Block.__(0, [/* tuple */[
          (function () {
              return run(20000);
            }),
          check,
          /* Short */0
        ]])
  ],
  /* [] */0
];

var functions = /* :: */[
  functions_000,
  functions_001
];

Micro_bench_types.add(functions);

function save_result() {
  var s = check_string(run(20000));
  var oc = Pervasives.open_out("result.ml");
  Pervasives.output_string(oc, "let result =\n\"");
  Pervasives.output_string(oc, s);
  Pervasives.output_string(oc, "\"");
  return Pervasives.close_out(oc);
}

if (Sys.argv.length > 1 && Caml_array.caml_array_get(Sys.argv, 1) === "make-result") {
  save_result(/* () */0);
}

var config = Micro_bench_run.Config[/* parse */1](/* () */0);

if (typeof config === "number") {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else if (config[0] !== 4103979) {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else {
  var conf = config[1];
  Fixture.run_n_times(1, (function () {
          var newrecord = conf.slice();
          return Micro_bench_run.run(/* Some */[/* Some */[/* `Run */[
                          4103979,
                          (newrecord[/* number_of_different_values */5] = 200, newrecord)
                        ]]], Micro_bench_types.functions(/* () */0));
        }));
}

var n = 20000;

exports.Hamming_result = Hamming_result;
exports.n0             = n0;
exports.n1             = n1;
exports.n2             = n2;
exports.n3             = n3;
exports.n5             = n5;
exports.$percent       = $percent;
exports.$star          = $star;
exports.$slash         = $slash;
exports.$plus          = $plus;
exports.digit          = digit;
exports.mul            = mul;
exports.cmp            = cmp;
exports.x2             = x2;
exports.x3             = x3;
exports.x5             = x5;
exports.nn1            = nn1;
exports.pr             = pr;
exports.map            = map;
exports.merge          = merge;
exports.skip           = skip;
exports.iter           = iter;
exports.make_hamming   = make_hamming;
exports.run            = run;
exports.check_i        = check_i;
exports.check_string   = check_string;
exports.check          = check;
exports.prepare        = prepare;
exports.range          = range;
exports.n              = n;
exports.functions      = functions;
exports.save_result    = save_result;
/* digit Not a pure module */
