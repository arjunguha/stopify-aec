// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

var List              = require("bs-platform/lib/js/list.js");
var Block             = require("bs-platform/lib/js/block.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var Fixture           = require("../fixture.js");
var Caml_int32        = require("bs-platform/lib/js/caml_int32.js");
var Pervasives        = require("bs-platform/lib/js/pervasives.js");
var Micro_bench_run   = require("../micro_bench_run.js");
var Micro_bench_types = require("../micro_bench_types.js");

function $pipe$neg(f, g, x) {
  return Curry._1(g, Curry._1(f, x));
}

function modify(l, f, a) {
  var value = Curry._1(l[/* get */0], a);
  var new_value = Curry._1(f, value);
  return Curry._2(l[/* set */1], new_value, a);
}

function _get(a, l) {
  return Curry._1(l[/* get */0], a);
}

function _set(v, a, l) {
  return Curry._2(l[/* set */1], v, a);
}

function _modify(f, l) {
  return (function (param) {
      return modify(l, f, param);
    });
}

function compose(l1, l2) {
  var partial_arg = l1[/* get */0];
  var partial_arg$1 = l2[/* get */0];
  var partial_arg$2 = l1[/* set */1];
  return /* record */[
          /* get */(function (param) {
              return Curry._1(partial_arg, Curry._1(partial_arg$1, param));
            }),
          /* set */(function (param) {
              var partial_arg$3 = Curry._1(partial_arg$2, param);
              return (function (param) {
                  return modify(l2, partial_arg$3, param);
                });
            })
        ];
}

function pair(l1, l2) {
  return /* record */[
          /* get */(function (param) {
              return /* tuple */[
                      Curry._1(l1[/* get */0], param[0]),
                      Curry._1(l2[/* get */0], param[1])
                    ];
            }),
          /* set */(function (param, param$1) {
              return /* tuple */[
                      Curry._2(l1[/* set */1], param[0], param$1[0]),
                      Curry._2(l2[/* set */1], param[1], param$1[1])
                    ];
            })
        ];
}

function pair3(l1, l2, l3) {
  return /* record */[
          /* get */(function (param) {
              return /* tuple */[
                      Curry._1(l1[/* get */0], param[0]),
                      Curry._1(l2[/* get */0], param[1]),
                      Curry._1(l3[/* get */0], param[2])
                    ];
            }),
          /* set */(function (param, param$1) {
              return /* tuple */[
                      Curry._2(l1[/* set */1], param[0], param$1[0]),
                      Curry._2(l2[/* set */1], param[1], param$1[1]),
                      Curry._2(l3[/* set */1], param[2], param$1[2])
                    ];
            })
        ];
}

function cond(pred, lt, lf) {
  var choose = function (a) {
    if (Curry._1(pred, a)) {
      return lt;
    } else {
      return lf;
    }
  };
  return /* record */[
          /* get */(function (a) {
              var l = choose(a);
              return Curry._1(l[/* get */0], a);
            }),
          /* set */(function (b, a) {
              var l = choose(a);
              return Curry._2(l[/* set */1], b, a);
            })
        ];
}

function id_000(a) {
  return a;
}

function id_001(b, _) {
  return b;
}

var id = /* record */[
  id_000,
  id_001
];

function first_000(prim) {
  return prim[0];
}

function first_001(v, a) {
  return /* tuple */[
          v,
          a[1]
        ];
}

var first = /* record */[
  first_000,
  first_001
];

function second_000(prim) {
  return prim[1];
}

function second_001(v, a) {
  return /* tuple */[
          a[0],
          v
        ];
}

var second = /* record */[
  second_000,
  second_001
];

function list_map(l) {
  var partial_arg = l[/* get */0];
  var partial_arg$1 = l[/* set */1];
  return /* record */[
          /* get */(function (param) {
              return List.map(partial_arg, param);
            }),
          /* set */(function (param, param$1) {
              return List.map2(partial_arg$1, param, param$1);
            })
        ];
}

function xmap(f, g, l) {
  var partial_arg = l[/* get */0];
  var partial_arg$1 = l[/* set */1];
  return /* record */[
          /* get */(function (param) {
              return Curry._1(f, Curry._1(partial_arg, param));
            }),
          /* set */(function (param) {
              return Curry._1(partial_arg$1, Curry._1(g, param));
            })
        ];
}

function $caret$eq(l, v, a) {
  return Curry._2(l[/* set */1], v, a);
}

function $pipe$neg$neg(l1, l2) {
  return compose(l2, l1);
}

var $star$star$star = pair;

function $plus$eq(l, v) {
  return (function (param) {
      return modify(l, (function (param) {
                    return v + param | 0;
                  }), param);
    });
}

function $neg$eq(l, v) {
  return (function (param) {
      return modify(l, (function (param) {
                    return v - param | 0;
                  }), param);
    });
}

var Infix = /* module */[
  /* |. */_get,
  /* ^= */$caret$eq,
  /* ^%= */modify,
  /* |-- */$pipe$neg$neg,
  /* --| */compose,
  /* *** */$star$star$star,
  /* += */$plus$eq,
  /* -= */$neg$eq
];

var Lens_util = /* module */[
  /* |- */$pipe$neg,
  /* modify */modify,
  /* _get */_get,
  /* _set */_set,
  /* _modify */_modify,
  /* compose */compose,
  /* pair */pair,
  /* pair3 */pair3,
  /* cond */cond,
  /* id */id,
  /* first */first,
  /* second */second,
  /* list_map */list_map,
  /* xmap */xmap,
  /* Infix */Infix
];

function x_000(param) {
  return param[/* x */0];
}

function x_001(x, param) {
  return /* record */[
          /* x */x,
          /* y */param[/* y */1]
        ];
}

var x = /* record */[
  x_000,
  x_001
];

function y_000(param) {
  return param[/* y */1];
}

function y_001(y, param) {
  return /* record */[
          /* x */param[/* x */0],
          /* y */y
        ];
}

var y = /* record */[
  y_000,
  y_001
];

function p1_000(param) {
  return param[/* p1 */0];
}

function p1_001(p1, param) {
  return /* record */[
          /* p1 */p1,
          /* p2 */param[/* p2 */1]
        ];
}

var p1 = /* record */[
  p1_000,
  p1_001
];

function p2_000(param) {
  return param[/* p2 */1];
}

function p2_001(p2, param) {
  return /* record */[
          /* p1 */param[/* p1 */0],
          /* p2 */p2
        ];
}

var p2 = /* record */[
  p2_000,
  p2_001
];

function lens_rect_area(r) {
  var l = compose(x, p1);
  var l$1 = compose(x, p2);
  var l$2 = compose(y, p1);
  var l$3 = compose(y, p2);
  return Pervasives.abs(Caml_int32.imul(Curry._1(l[/* get */0], r) - Curry._1(l$1[/* get */0], r) | 0, Curry._1(l$2[/* get */0], r) - Curry._1(l$3[/* get */0], r) | 0));
}

function direct_rect_area(r) {
  return Pervasives.abs(Caml_int32.imul(r[/* p1 */0][/* x */0] - r[/* p2 */1][/* x */0] | 0, r[/* p1 */0][/* y */1] - r[/* p2 */1][/* y */1] | 0));
}

function prepare(i) {
  var p1_000 = /* x */1111 + i | 0;
  var p1_001 = /* y */2222 + i | 0;
  var p1 = /* record */[
    p1_000,
    p1_001
  ];
  var p2_000 = /* x */3333 + i | 0;
  var p2_001 = /* y */4444 + i | 0;
  var p2 = /* record */[
    p2_000,
    p2_001
  ];
  return /* record */[
          /* p1 */p1,
          /* p2 */p2
        ];
}

function check_rect_area(n, res) {
  var r = prepare(n);
  var s = Pervasives.abs(Caml_int32.imul(r[/* p1 */0][/* x */0] - r[/* p2 */1][/* x */0] | 0, r[/* p1 */0][/* y */1] - r[/* p2 */1][/* y */1] | 0));
  if (s === res) {
    return /* Ok */0;
  } else {
    return /* Error */["rect_area"];
  }
}

var range = /* :: */[
  /* tuple */[
    /* Any */0,
    /* Short */0
  ],
  /* [] */0
];

var rect_area_group = /* Int_group */Block.__(3, [/* tuple */[
      /* :: */[
        /* tuple */[
          "lens",
          lens_rect_area
        ],
        /* :: */[
          /* tuple */[
            "baseline",
            direct_rect_area
          ],
          /* [] */0
        ]
      ],
      prepare,
      check_rect_area,
      range
    ]]);

var functions_000 = /* tuple */[
  "rect_area",
  rect_area_group
];

var functions = /* :: */[
  functions_000,
  /* [] */0
];

Micro_bench_types.add(functions);

var config = Micro_bench_run.Config[/* parse */1](/* () */0);

if (typeof config === "number") {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else if (config[0] !== 4103979) {
  Micro_bench_run.run(/* Some */[/* Some */[config]], Micro_bench_types.functions(/* () */0));
} else {
  var conf = config[1];
  Fixture.run_n_times(100, (function () {
          var newrecord = conf.slice();
          return Micro_bench_run.run(/* Some */[/* Some */[/* `Run */[
                          4103979,
                          (newrecord[/* number_of_different_values */5] = 1000, newrecord)
                        ]]], Micro_bench_types.functions(/* () */0));
        }));
}

exports.Lens_util        = Lens_util;
exports.x                = x;
exports.y                = y;
exports.p1               = p1;
exports.p2               = p2;
exports.lens_rect_area   = lens_rect_area;
exports.direct_rect_area = direct_rect_area;
exports.prepare          = prepare;
exports.check_rect_area  = check_rect_area;
exports.range            = range;
exports.rect_area_group  = rect_area_group;
exports.functions        = functions;
/*  Not a pure module */
